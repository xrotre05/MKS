
CV10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c60  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08003e10  08003e10  00013e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ee0  08003ee0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08003ee0  08003ee0  00013ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ee8  08003ee8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ee8  08003ee8  00013ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eec  08003eec  00013eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08003ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000200  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000280  20000280  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000cc59  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c5c  00000000  00000000  0002cd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c50  00000000  00000000  0002e9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009a0  00000000  00000000  0002f5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000242c9  00000000  00000000  0002ff98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000dff6  00000000  00000000  00054261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dbb62  00000000  00000000  00062257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003b80  00000000  00000000  0013ddbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  0014193c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003df8 	.word	0x08003df8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08003df8 	.word	0x08003df8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d013      	beq.n	80005cc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005ac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d00b      	beq.n	80005cc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005b4:	e000      	b.n	80005b8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005b6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0f9      	beq.n	80005b6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005c2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005cc:	687b      	ldr	r3, [r7, #4]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <__io_putchar>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
int __io_putchar(int ch)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ffd1 	bl	800058c <ITM_SendChar>
	return 0;
 80005ea:	2300      	movs	r3, #0
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005fa:	f000 fd1d 	bl	8001038 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005fe:	f000 f885 	bl	800070c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000602:	f000 f965 	bl	80008d0 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000606:	f000 f939 	bl	800087c <MX_USART3_UART_Init>
	MX_TIM3_Init();
 800060a:	f000 f8e9 	bl	80007e0 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	printf("start\n");
 800060e:	4834      	ldr	r0, [pc, #208]	; (80006e0 <main+0xec>)
 8000610:	f002 fd8a 	bl	8003128 <puts>
	HAL_TIM_Base_Start_IT(&htim3);
 8000614:	4833      	ldr	r0, [pc, #204]	; (80006e4 <main+0xf0>)
 8000616:	f001 fd7d 	bl	8002114 <HAL_TIM_Base_Start_IT>

	uint32_t seq=0;
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
	uint32_t time=0;
 800061e:	2300      	movs	r3, #0
 8000620:	603b      	str	r3, [r7, #0]

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin,0);
 8000622:	2200      	movs	r2, #0
 8000624:	2101      	movs	r1, #1
 8000626:	4830      	ldr	r0, [pc, #192]	; (80006e8 <main+0xf4>)
 8000628:	f001 f872 	bl	8001710 <HAL_GPIO_WritePin>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (key!=-1){
 800062c:	4b2f      	ldr	r3, [pc, #188]	; (80006ec <main+0xf8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000634:	d042      	beq.n	80006bc <main+0xc8>
			printf("%d\n",key);
 8000636:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <main+0xf8>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4619      	mov	r1, r3
 800063c:	482c      	ldr	r0, [pc, #176]	; (80006f0 <main+0xfc>)
 800063e:	f002 fd0d 	bl	800305c <iprintf>
			printf("%lu\n",code[seq]);
 8000642:	4a2c      	ldr	r2, [pc, #176]	; (80006f4 <main+0x100>)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800064a:	4619      	mov	r1, r3
 800064c:	482a      	ldr	r0, [pc, #168]	; (80006f8 <main+0x104>)
 800064e:	f002 fd05 	bl	800305c <iprintf>
			time=HAL_GetTick();
 8000652:	f000 fd57 	bl	8001104 <HAL_GetTick>
 8000656:	6038      	str	r0, [r7, #0]
			if (key==code[seq]){
 8000658:	4a26      	ldr	r2, [pc, #152]	; (80006f4 <main+0x100>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000660:	4a22      	ldr	r2, [pc, #136]	; (80006ec <main+0xf8>)
 8000662:	6812      	ldr	r2, [r2, #0]
 8000664:	4293      	cmp	r3, r2
 8000666:	d11d      	bne.n	80006a4 <main+0xb0>
				if (seq==4){
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b04      	cmp	r3, #4
 800066c:	d113      	bne.n	8000696 <main+0xa2>
					printf("Password accepted\n");
 800066e:	4823      	ldr	r0, [pc, #140]	; (80006fc <main+0x108>)
 8000670:	f002 fd5a 	bl	8003128 <puts>
					HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin,1);
 8000674:	2201      	movs	r2, #1
 8000676:	2101      	movs	r1, #1
 8000678:	481b      	ldr	r0, [pc, #108]	; (80006e8 <main+0xf4>)
 800067a:	f001 f849 	bl	8001710 <HAL_GPIO_WritePin>
					HAL_Delay(5000);
 800067e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000682:	f000 fd4b 	bl	800111c <HAL_Delay>
					HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin,0);
 8000686:	2200      	movs	r2, #0
 8000688:	2101      	movs	r1, #1
 800068a:	4817      	ldr	r0, [pc, #92]	; (80006e8 <main+0xf4>)
 800068c:	f001 f840 	bl	8001710 <HAL_GPIO_WritePin>
					seq=0;
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	e00b      	b.n	80006ae <main+0xba>
				}else{
					printf("Correct\n");
 8000696:	481a      	ldr	r0, [pc, #104]	; (8000700 <main+0x10c>)
 8000698:	f002 fd46 	bl	8003128 <puts>
					seq++;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3301      	adds	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	e004      	b.n	80006ae <main+0xba>
				}
			}else{
				printf("Incorrect\n");
 80006a4:	4817      	ldr	r0, [pc, #92]	; (8000704 <main+0x110>)
 80006a6:	f002 fd3f 	bl	8003128 <puts>
				seq=0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]

			}
			HAL_Delay(250);
 80006ae:	20fa      	movs	r0, #250	; 0xfa
 80006b0:	f000 fd34 	bl	800111c <HAL_Delay>
			key=-1;
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <main+0xf8>)
 80006b6:	f04f 32ff 	mov.w	r2, #4294967295
 80006ba:	601a      	str	r2, [r3, #0]
		}


		if ((HAL_GetTick()-time>3000)&&(seq!=0)){
 80006bc:	f000 fd22 	bl	8001104 <HAL_GetTick>
 80006c0:	4602      	mov	r2, r0
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d9ae      	bls.n	800062c <main+0x38>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d0ab      	beq.n	800062c <main+0x38>
			printf("timeout\n");
 80006d4:	480c      	ldr	r0, [pc, #48]	; (8000708 <main+0x114>)
 80006d6:	f002 fd27 	bl	8003128 <puts>
			seq=0;
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
		if (key!=-1){
 80006de:	e7a5      	b.n	800062c <main+0x38>
 80006e0:	08003e10 	.word	0x08003e10
 80006e4:	2000009c 	.word	0x2000009c
 80006e8:	40020400 	.word	0x40020400
 80006ec:	20000000 	.word	0x20000000
 80006f0:	08003e18 	.word	0x08003e18
 80006f4:	20000004 	.word	0x20000004
 80006f8:	08003e1c 	.word	0x08003e1c
 80006fc:	08003e24 	.word	0x08003e24
 8000700:	08003e38 	.word	0x08003e38
 8000704:	08003e40 	.word	0x08003e40
 8000708:	08003e4c 	.word	0x08003e4c

0800070c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	; 0x50
 8000710:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0320 	add.w	r3, r7, #32
 8000716:	2230      	movs	r2, #48	; 0x30
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f002 fde4 	bl	80032e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <SystemClock_Config+0xcc>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	4a27      	ldr	r2, [pc, #156]	; (80007d8 <SystemClock_Config+0xcc>)
 800073a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073e:	6413      	str	r3, [r2, #64]	; 0x40
 8000740:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <SystemClock_Config+0xcc>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	4b22      	ldr	r3, [pc, #136]	; (80007dc <SystemClock_Config+0xd0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a21      	ldr	r2, [pc, #132]	; (80007dc <SystemClock_Config+0xd0>)
 8000756:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <SystemClock_Config+0xd0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000768:	2301      	movs	r3, #1
 800076a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800076c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000772:	2302      	movs	r3, #2
 8000774:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800077a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800077c:	2304      	movs	r3, #4
 800077e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000780:	23a8      	movs	r3, #168	; 0xa8
 8000782:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000784:	2302      	movs	r3, #2
 8000786:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000788:	2307      	movs	r3, #7
 800078a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078c:	f107 0320 	add.w	r3, r7, #32
 8000790:	4618      	mov	r0, r3
 8000792:	f000 ffd7 	bl	8001744 <HAL_RCC_OscConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x94>
	{
		Error_Handler();
 800079c:	f000 fa9a 	bl	8000cd4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a0:	230f      	movs	r3, #15
 80007a2:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a4:	2302      	movs	r3, #2
 80007a6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	2105      	movs	r1, #5
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 fa38 	bl	8001c34 <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80007ca:	f000 fa83 	bl	8000cd4 <Error_Handler>
	}
}
 80007ce:	bf00      	nop
 80007d0:	3750      	adds	r7, #80	; 0x50
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40007000 	.word	0x40007000

080007e0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f4:	463b      	mov	r3, r7
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <MX_TIM3_Init+0x94>)
 80007fe:	4a1e      	ldr	r2, [pc, #120]	; (8000878 <MX_TIM3_Init+0x98>)
 8000800:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 8399;
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <MX_TIM3_Init+0x94>)
 8000804:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000808:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_TIM3_Init+0x94>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 99;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_TIM3_Init+0x94>)
 8000812:	2263      	movs	r2, #99	; 0x63
 8000814:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_TIM3_Init+0x94>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_TIM3_Init+0x94>)
 800081e:	2280      	movs	r2, #128	; 0x80
 8000820:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000822:	4814      	ldr	r0, [pc, #80]	; (8000874 <MX_TIM3_Init+0x94>)
 8000824:	f001 fc26 	bl	8002074 <HAL_TIM_Base_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 800082e:	f000 fa51 	bl	8000cd4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000836:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000838:	f107 0308 	add.w	r3, r7, #8
 800083c:	4619      	mov	r1, r3
 800083e:	480d      	ldr	r0, [pc, #52]	; (8000874 <MX_TIM3_Init+0x94>)
 8000840:	f001 fde0 	bl	8002404 <HAL_TIM_ConfigClockSource>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM3_Init+0x6e>
	{
		Error_Handler();
 800084a:	f000 fa43 	bl	8000cd4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000856:	463b      	mov	r3, r7
 8000858:	4619      	mov	r1, r3
 800085a:	4806      	ldr	r0, [pc, #24]	; (8000874 <MX_TIM3_Init+0x94>)
 800085c:	f001 fffc 	bl	8002858 <HAL_TIMEx_MasterConfigSynchronization>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM3_Init+0x8a>
	{
		Error_Handler();
 8000866:	f000 fa35 	bl	8000cd4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000009c 	.word	0x2000009c
 8000878:	40000400 	.word	0x40000400

0800087c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART3_UART_Init+0x4c>)
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <MX_USART3_UART_Init+0x50>)
 8000884:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_USART3_UART_Init+0x4c>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART3_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART3_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART3_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART3_UART_Init+0x4c>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART3_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART3_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USART3_UART_Init+0x4c>)
 80008b4:	f002 f860 	bl	8002978 <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 80008be:	f000 fa09 	bl	8000cd4 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200000e4 	.word	0x200000e4
 80008cc:	40004800 	.word	0x40004800

080008d0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08e      	sub	sp, #56	; 0x38
 80008d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
 80008ea:	4ba1      	ldr	r3, [pc, #644]	; (8000b70 <MX_GPIO_Init+0x2a0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4aa0      	ldr	r2, [pc, #640]	; (8000b70 <MX_GPIO_Init+0x2a0>)
 80008f0:	f043 0310 	orr.w	r3, r3, #16
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b9e      	ldr	r3, [pc, #632]	; (8000b70 <MX_GPIO_Init+0x2a0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0310 	and.w	r3, r3, #16
 80008fe:	623b      	str	r3, [r7, #32]
 8000900:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
 8000906:	4b9a      	ldr	r3, [pc, #616]	; (8000b70 <MX_GPIO_Init+0x2a0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a99      	ldr	r2, [pc, #612]	; (8000b70 <MX_GPIO_Init+0x2a0>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b97      	ldr	r3, [pc, #604]	; (8000b70 <MX_GPIO_Init+0x2a0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	61fb      	str	r3, [r7, #28]
 800091c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
 8000922:	4b93      	ldr	r3, [pc, #588]	; (8000b70 <MX_GPIO_Init+0x2a0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a92      	ldr	r2, [pc, #584]	; (8000b70 <MX_GPIO_Init+0x2a0>)
 8000928:	f043 0320 	orr.w	r3, r3, #32
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b90      	ldr	r3, [pc, #576]	; (8000b70 <MX_GPIO_Init+0x2a0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0320 	and.w	r3, r3, #32
 8000936:	61bb      	str	r3, [r7, #24]
 8000938:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	4b8c      	ldr	r3, [pc, #560]	; (8000b70 <MX_GPIO_Init+0x2a0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a8b      	ldr	r2, [pc, #556]	; (8000b70 <MX_GPIO_Init+0x2a0>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b89      	ldr	r3, [pc, #548]	; (8000b70 <MX_GPIO_Init+0x2a0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	4b85      	ldr	r3, [pc, #532]	; (8000b70 <MX_GPIO_Init+0x2a0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a84      	ldr	r2, [pc, #528]	; (8000b70 <MX_GPIO_Init+0x2a0>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b82      	ldr	r3, [pc, #520]	; (8000b70 <MX_GPIO_Init+0x2a0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b7e      	ldr	r3, [pc, #504]	; (8000b70 <MX_GPIO_Init+0x2a0>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a7d      	ldr	r2, [pc, #500]	; (8000b70 <MX_GPIO_Init+0x2a0>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b7b      	ldr	r3, [pc, #492]	; (8000b70 <MX_GPIO_Init+0x2a0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	4b77      	ldr	r3, [pc, #476]	; (8000b70 <MX_GPIO_Init+0x2a0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a76      	ldr	r2, [pc, #472]	; (8000b70 <MX_GPIO_Init+0x2a0>)
 8000998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b74      	ldr	r3, [pc, #464]	; (8000b70 <MX_GPIO_Init+0x2a0>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	4b70      	ldr	r3, [pc, #448]	; (8000b70 <MX_GPIO_Init+0x2a0>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a6f      	ldr	r2, [pc, #444]	; (8000b70 <MX_GPIO_Init+0x2a0>)
 80009b4:	f043 0308 	orr.w	r3, r3, #8
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b6d      	ldr	r3, [pc, #436]	; (8000b70 <MX_GPIO_Init+0x2a0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0308 	and.w	r3, r3, #8
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, Row3_Pin|Row4_Pin|Row2_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 7160 	mov.w	r1, #896	; 0x380
 80009cc:	4869      	ldr	r0, [pc, #420]	; (8000b74 <MX_GPIO_Init+0x2a4>)
 80009ce:	f000 fe9f 	bl	8001710 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f244 0181 	movw	r1, #16513	; 0x4081
 80009d8:	4867      	ldr	r0, [pc, #412]	; (8000b78 <MX_GPIO_Init+0x2a8>)
 80009da:	f000 fe99 	bl	8001710 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, Row1_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2142      	movs	r1, #66	; 0x42
 80009e2:	4866      	ldr	r0, [pc, #408]	; (8000b7c <MX_GPIO_Init+0x2ac>)
 80009e4:	f000 fe94 	bl	8001710 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Col1_Pin Col4_Pin Col3_Pin Col2_Pin */
	GPIO_InitStruct.Pin = Col1_Pin|Col4_Pin|Col3_Pin|Col2_Pin;
 80009e8:	2378      	movs	r3, #120	; 0x78
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4861      	ldr	r0, [pc, #388]	; (8000b80 <MX_GPIO_Init+0x2b0>)
 80009fc:	f000 fcc4 	bl	8001388 <HAL_GPIO_Init>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a14:	4619      	mov	r1, r3
 8000a16:	485b      	ldr	r0, [pc, #364]	; (8000b84 <MX_GPIO_Init+0x2b4>)
 8000a18:	f000 fcb6 	bl	8001388 <HAL_GPIO_Init>

	/*Configure GPIO pins : Row3_Pin Row4_Pin Row2_Pin */
	GPIO_InitStruct.Pin = Row3_Pin|Row4_Pin|Row2_Pin;
 8000a1c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a22:	2311      	movs	r3, #17
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a32:	4619      	mov	r1, r3
 8000a34:	484f      	ldr	r0, [pc, #316]	; (8000b74 <MX_GPIO_Init+0x2a4>)
 8000a36:	f000 fca7 	bl	8001388 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a3a:	2332      	movs	r3, #50	; 0x32
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a4a:	230b      	movs	r3, #11
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	484b      	ldr	r0, [pc, #300]	; (8000b84 <MX_GPIO_Init+0x2b4>)
 8000a56:	f000 fc97 	bl	8001388 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a5a:	2386      	movs	r3, #134	; 0x86
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a6a:	230b      	movs	r3, #11
 8000a6c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a72:	4619      	mov	r1, r3
 8000a74:	4844      	ldr	r0, [pc, #272]	; (8000b88 <MX_GPIO_Init+0x2b8>)
 8000a76:	f000 fc87 	bl	8001388 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a7a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a90:	4619      	mov	r1, r3
 8000a92:	4839      	ldr	r0, [pc, #228]	; (8000b78 <MX_GPIO_Init+0x2a8>)
 8000a94:	f000 fc78 	bl	8001388 <HAL_GPIO_Init>

	/*Configure GPIO pin : Row1_Pin */
	GPIO_InitStruct.Pin = Row1_Pin;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a9c:	2311      	movs	r3, #17
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(Row1_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aac:	4619      	mov	r1, r3
 8000aae:	4833      	ldr	r0, [pc, #204]	; (8000b7c <MX_GPIO_Init+0x2ac>)
 8000ab0:	f000 fc6a 	bl	8001388 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ac6:	230b      	movs	r3, #11
 8000ac8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4829      	ldr	r0, [pc, #164]	; (8000b78 <MX_GPIO_Init+0x2a8>)
 8000ad2:	f000 fc59 	bl	8001388 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ad6:	2340      	movs	r3, #64	; 0x40
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aea:	4619      	mov	r1, r3
 8000aec:	4823      	ldr	r0, [pc, #140]	; (8000b7c <MX_GPIO_Init+0x2ac>)
 8000aee:	f000 fc4b 	bl	8001388 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000af2:	2380      	movs	r3, #128	; 0x80
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	4619      	mov	r1, r3
 8000b04:	481d      	ldr	r0, [pc, #116]	; (8000b7c <MX_GPIO_Init+0x2ac>)
 8000b06:	f000 fc3f 	bl	8001388 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b0a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b1c:	230a      	movs	r3, #10
 8000b1e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b24:	4619      	mov	r1, r3
 8000b26:	4818      	ldr	r0, [pc, #96]	; (8000b88 <MX_GPIO_Init+0x2b8>)
 8000b28:	f000 fc2e 	bl	8001388 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4811      	ldr	r0, [pc, #68]	; (8000b88 <MX_GPIO_Init+0x2b8>)
 8000b42:	f000 fc21 	bl	8001388 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b46:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b58:	230b      	movs	r3, #11
 8000b5a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b60:	4619      	mov	r1, r3
 8000b62:	4806      	ldr	r0, [pc, #24]	; (8000b7c <MX_GPIO_Init+0x2ac>)
 8000b64:	f000 fc10 	bl	8001388 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b68:	bf00      	nop
 8000b6a:	3738      	adds	r7, #56	; 0x38
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40021400 	.word	0x40021400
 8000b78:	40020400 	.word	0x40020400
 8000b7c:	40021800 	.word	0x40021800
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40020800 	.word	0x40020800
 8000b88:	40020000 	.word	0x40020000

08000b8c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
			{ 1, 2, 3, 21 },
			{ 4, 5, 6, 22 },
			{ 7, 8, 9, 23 },
			{ 11, 0, 12, 24 },
	};
	if (key == -1) {
 8000b94:	4b49      	ldr	r3, [pc, #292]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b9c:	d13e      	bne.n	8000c1c <HAL_TIM_PeriodElapsedCallback+0x90>
		if (HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin) == GPIO_PIN_RESET) key = keyboard[row][0];
 8000b9e:	2108      	movs	r1, #8
 8000ba0:	4847      	ldr	r0, [pc, #284]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000ba2:	f000 fd9d 	bl	80016e0 <HAL_GPIO_ReadPin>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d107      	bne.n	8000bbc <HAL_TIM_PeriodElapsedCallback+0x30>
 8000bac:	4b45      	ldr	r3, [pc, #276]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a45      	ldr	r2, [pc, #276]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000bb2:	011b      	lsls	r3, r3, #4
 8000bb4:	4413      	add	r3, r2
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a40      	ldr	r2, [pc, #256]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000bba:	6013      	str	r3, [r2, #0]
		if (HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin) == GPIO_PIN_RESET) key = keyboard[row][1];
 8000bbc:	2140      	movs	r1, #64	; 0x40
 8000bbe:	4840      	ldr	r0, [pc, #256]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000bc0:	f000 fd8e 	bl	80016e0 <HAL_GPIO_ReadPin>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d108      	bne.n	8000bdc <HAL_TIM_PeriodElapsedCallback+0x50>
 8000bca:	4b3e      	ldr	r3, [pc, #248]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a3e      	ldr	r2, [pc, #248]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000bd0:	011b      	lsls	r3, r3, #4
 8000bd2:	4413      	add	r3, r2
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a38      	ldr	r2, [pc, #224]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000bda:	6013      	str	r3, [r2, #0]
		if (HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin) == GPIO_PIN_RESET) key = keyboard[row][2];
 8000bdc:	2120      	movs	r1, #32
 8000bde:	4838      	ldr	r0, [pc, #224]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000be0:	f000 fd7e 	bl	80016e0 <HAL_GPIO_ReadPin>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d108      	bne.n	8000bfc <HAL_TIM_PeriodElapsedCallback+0x70>
 8000bea:	4b36      	ldr	r3, [pc, #216]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a36      	ldr	r2, [pc, #216]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000bf0:	011b      	lsls	r3, r3, #4
 8000bf2:	4413      	add	r3, r2
 8000bf4:	3308      	adds	r3, #8
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a30      	ldr	r2, [pc, #192]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000bfa:	6013      	str	r3, [r2, #0]
		if (HAL_GPIO_ReadPin(Col4_GPIO_Port, Col4_Pin) == GPIO_PIN_RESET) key = keyboard[row][3];
 8000bfc:	2110      	movs	r1, #16
 8000bfe:	4830      	ldr	r0, [pc, #192]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000c00:	f000 fd6e 	bl	80016e0 <HAL_GPIO_ReadPin>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d108      	bne.n	8000c1c <HAL_TIM_PeriodElapsedCallback+0x90>
 8000c0a:	4b2e      	ldr	r3, [pc, #184]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a2e      	ldr	r2, [pc, #184]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000c10:	011b      	lsls	r3, r3, #4
 8000c12:	4413      	add	r3, r2
 8000c14:	330c      	adds	r3, #12
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a28      	ldr	r2, [pc, #160]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000c1a:	6013      	str	r3, [r2, #0]

	}
	HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2102      	movs	r1, #2
 8000c20:	482a      	ldr	r0, [pc, #168]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000c22:	f000 fd75 	bl	8001710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c2c:	4828      	ldr	r0, [pc, #160]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000c2e:	f000 fd6f 	bl	8001710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2180      	movs	r1, #128	; 0x80
 8000c36:	4826      	ldr	r0, [pc, #152]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000c38:	f000 fd6a 	bl	8001710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c42:	4823      	ldr	r0, [pc, #140]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000c44:	f000 fd64 	bl	8001710 <HAL_GPIO_WritePin>
	switch (row) {
 8000c48:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d831      	bhi.n	8000cb4 <HAL_TIM_PeriodElapsedCallback+0x128>
 8000c50:	a201      	add	r2, pc, #4	; (adr r2, 8000c58 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c56:	bf00      	nop
 8000c58:	08000c69 	.word	0x08000c69
 8000c5c:	08000c7d 	.word	0x08000c7d
 8000c60:	08000c8f 	.word	0x08000c8f
 8000c64:	08000ca3 	.word	0x08000ca3
	case 0: row = 1; HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_RESET); break;
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c74:	4816      	ldr	r0, [pc, #88]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000c76:	f000 fd4b 	bl	8001710 <HAL_GPIO_WritePin>
 8000c7a:	e01b      	b.n	8000cb4 <HAL_TIM_PeriodElapsedCallback+0x128>
	case 1: row = 2; HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_RESET); break;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000c7e:	2202      	movs	r2, #2
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	2200      	movs	r2, #0
 8000c84:	2180      	movs	r1, #128	; 0x80
 8000c86:	4812      	ldr	r0, [pc, #72]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000c88:	f000 fd42 	bl	8001710 <HAL_GPIO_WritePin>
 8000c8c:	e012      	b.n	8000cb4 <HAL_TIM_PeriodElapsedCallback+0x128>
	case 2: row = 3; HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_RESET); break;
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000c90:	2203      	movs	r2, #3
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	2200      	movs	r2, #0
 8000c96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9a:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000c9c:	f000 fd38 	bl	8001710 <HAL_GPIO_WritePin>
 8000ca0:	e008      	b.n	8000cb4 <HAL_TIM_PeriodElapsedCallback+0x128>
	case 3: row = 0; HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_RESET); break;
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2102      	movs	r1, #2
 8000cac:	4807      	ldr	r0, [pc, #28]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000cae:	f000 fd2f 	bl	8001710 <HAL_GPIO_WritePin>
 8000cb2:	bf00      	nop
	}
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	20000128 	.word	0x20000128
 8000cc8:	08003e54 	.word	0x08003e54
 8000ccc:	40021800 	.word	0x40021800
 8000cd0:	40021400 	.word	0x40021400

08000cd4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000cdc:	e7fe      	b.n	8000cdc <Error_Handler+0x8>
	...

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800

08000d30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0e      	ldr	r2, [pc, #56]	; (8000d78 <HAL_TIM_Base_MspInit+0x48>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d115      	bne.n	8000d6e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <HAL_TIM_Base_MspInit+0x4c>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a0c      	ldr	r2, [pc, #48]	; (8000d7c <HAL_TIM_Base_MspInit+0x4c>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_TIM_Base_MspInit+0x4c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	201d      	movs	r0, #29
 8000d64:	f000 fad9 	bl	800131a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d68:	201d      	movs	r0, #29
 8000d6a:	f000 faf2 	bl	8001352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40000400 	.word	0x40000400
 8000d7c:	40023800 	.word	0x40023800

08000d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <HAL_UART_MspInit+0x84>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d12c      	bne.n	8000dfc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a10      	ldr	r2, [pc, #64]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000dc8:	f043 0308 	orr.w	r3, r3, #8
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dec:	2307      	movs	r3, #7
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <HAL_UART_MspInit+0x8c>)
 8000df8:	f000 fac6 	bl	8001388 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	; 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40004800 	.word	0x40004800
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020c00 	.word	0x40020c00

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <NMI_Handler+0x4>

08000e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <MemManage_Handler+0x4>

08000e22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e5c:	f000 f93e 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <TIM3_IRQHandler+0x10>)
 8000e6a:	f001 f9c3 	bl	80021f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000009c 	.word	0x2000009c

08000e78 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	e00a      	b.n	8000ea0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e8a:	f3af 8000 	nop.w
 8000e8e:	4601      	mov	r1, r0
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	1c5a      	adds	r2, r3, #1
 8000e94:	60ba      	str	r2, [r7, #8]
 8000e96:	b2ca      	uxtb	r2, r1
 8000e98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	dbf0      	blt.n	8000e8a <_read+0x12>
  }

  return len;
 8000ea8:	687b      	ldr	r3, [r7, #4]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	60f8      	str	r0, [r7, #12]
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
 8000ec2:	e009      	b.n	8000ed8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	1c5a      	adds	r2, r3, #1
 8000ec8:	60ba      	str	r2, [r7, #8]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fb84 	bl	80005da <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	dbf1      	blt.n	8000ec4 <_write+0x12>
  }
  return len;
 8000ee0:	687b      	ldr	r3, [r7, #4]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <_close>:

int _close(int file)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f12:	605a      	str	r2, [r3, #4]
  return 0;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <_isatty>:

int _isatty(int file)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f5c:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <_sbrk+0x5c>)
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <_sbrk+0x60>)
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d102      	bne.n	8000f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <_sbrk+0x64>)
 8000f72:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <_sbrk+0x68>)
 8000f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d207      	bcs.n	8000f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f84:	f002 f9fe 	bl	8003384 <__errno>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f92:	e009      	b.n	8000fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <_sbrk+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9a:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <_sbrk+0x64>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <_sbrk+0x64>)
 8000fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20030000 	.word	0x20030000
 8000fb4:	00000400 	.word	0x00000400
 8000fb8:	2000012c 	.word	0x2000012c
 8000fbc:	20000280 	.word	0x20000280

08000fc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <SystemInit+0x20>)
 8000fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <SystemInit+0x20>)
 8000fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800101c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fea:	490e      	ldr	r1, [pc, #56]	; (8001024 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fec:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001000:	4c0b      	ldr	r4, [pc, #44]	; (8001030 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800100e:	f7ff ffd7 	bl	8000fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001012:	f002 f9bd 	bl	8003390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001016:	f7ff faed 	bl	80005f4 <main>
  bx  lr    
 800101a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800101c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001028:	08003ef0 	.word	0x08003ef0
  ldr r2, =_sbss
 800102c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001030:	20000280 	.word	0x20000280

08001034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC_IRQHandler>
	...

08001038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <HAL_Init+0x40>)
 8001042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001046:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <HAL_Init+0x40>)
 800104e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001052:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a07      	ldr	r2, [pc, #28]	; (8001078 <HAL_Init+0x40>)
 800105a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001060:	2003      	movs	r0, #3
 8001062:	f000 f94f 	bl	8001304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001066:	2000      	movs	r0, #0
 8001068:	f000 f808 	bl	800107c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800106c:	f7ff fe38 	bl	8000ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023c00 	.word	0x40023c00

0800107c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_InitTick+0x54>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_InitTick+0x58>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001092:	fbb3 f3f1 	udiv	r3, r3, r1
 8001096:	fbb2 f3f3 	udiv	r3, r2, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f967 	bl	800136e <HAL_SYSTICK_Config>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00e      	b.n	80010c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d80a      	bhi.n	80010c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f000 f92f 	bl	800131a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010bc:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <HAL_InitTick+0x5c>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e000      	b.n	80010c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000018 	.word	0x20000018
 80010d4:	20000020 	.word	0x20000020
 80010d8:	2000001c 	.word	0x2000001c

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000020 	.word	0x20000020
 8001100:	20000130 	.word	0x20000130

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000130 	.word	0x20000130

0800111c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001124:	f7ff ffee 	bl	8001104 <HAL_GetTick>
 8001128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001134:	d005      	beq.n	8001142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <HAL_Delay+0x44>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001142:	bf00      	nop
 8001144:	f7ff ffde 	bl	8001104 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	d8f7      	bhi.n	8001144 <HAL_Delay+0x28>
  {
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000020 	.word	0x20000020

08001164 <__NVIC_SetPriorityGrouping>:
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800118c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001196:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	60d3      	str	r3, [r2, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_GetPriorityGrouping>:
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_EnableIRQ>:
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	db0b      	blt.n	80011f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	f003 021f 	and.w	r2, r3, #31
 80011e0:	4907      	ldr	r1, [pc, #28]	; (8001200 <__NVIC_EnableIRQ+0x38>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	095b      	lsrs	r3, r3, #5
 80011e8:	2001      	movs	r0, #1
 80011ea:	fa00 f202 	lsl.w	r2, r0, r2
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100

08001204 <__NVIC_SetPriority>:
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0a      	blt.n	800122e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	490c      	ldr	r1, [pc, #48]	; (8001250 <__NVIC_SetPriority+0x4c>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	440b      	add	r3, r1
 8001228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800122c:	e00a      	b.n	8001244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4908      	ldr	r1, [pc, #32]	; (8001254 <__NVIC_SetPriority+0x50>)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	3b04      	subs	r3, #4
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	440b      	add	r3, r1
 8001242:	761a      	strb	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_EncodePriority>:
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f1c3 0307 	rsb	r3, r3, #7
 8001272:	2b04      	cmp	r3, #4
 8001274:	bf28      	it	cs
 8001276:	2304      	movcs	r3, #4
 8001278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3304      	adds	r3, #4
 800127e:	2b06      	cmp	r3, #6
 8001280:	d902      	bls.n	8001288 <NVIC_EncodePriority+0x30>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3b03      	subs	r3, #3
 8001286:	e000      	b.n	800128a <NVIC_EncodePriority+0x32>
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	f04f 32ff 	mov.w	r2, #4294967295
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	4313      	orrs	r3, r2
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	; 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <SysTick_Config>:
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d0:	d301      	bcc.n	80012d6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00f      	b.n	80012f6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <SysTick_Config+0x40>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012de:	210f      	movs	r1, #15
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f7ff ff8e 	bl	8001204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <SysTick_Config+0x40>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <SysTick_Config+0x40>)
 80012f0:	2207      	movs	r2, #7
 80012f2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	e000e010 	.word	0xe000e010

08001304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff29 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800132c:	f7ff ff3e 	bl	80011ac <__NVIC_GetPriorityGrouping>
 8001330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f7ff ff8e 	bl	8001258 <NVIC_EncodePriority>
 800133c:	4602      	mov	r2, r0
 800133e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff5d 	bl	8001204 <__NVIC_SetPriority>
}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff31 	bl	80011c8 <__NVIC_EnableIRQ>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ffa2 	bl	80012c0 <SysTick_Config>
 800137c:	4603      	mov	r3, r0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	; 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	e177      	b.n	8001694 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013a4:	2201      	movs	r2, #1
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	429a      	cmp	r2, r3
 80013be:	f040 8166 	bne.w	800168e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d005      	beq.n	80013da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d130      	bne.n	800143c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	2203      	movs	r2, #3
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	68da      	ldr	r2, [r3, #12]
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001410:	2201      	movs	r2, #1
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	091b      	lsrs	r3, r3, #4
 8001426:	f003 0201 	and.w	r2, r3, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b03      	cmp	r3, #3
 8001446:	d017      	beq.n	8001478 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	2203      	movs	r2, #3
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d123      	bne.n	80014cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	08da      	lsrs	r2, r3, #3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3208      	adds	r2, #8
 800148c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	220f      	movs	r2, #15
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	08da      	lsrs	r2, r3, #3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3208      	adds	r2, #8
 80014c6:	69b9      	ldr	r1, [r7, #24]
 80014c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0203 	and.w	r2, r3, #3
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 80c0 	beq.w	800168e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b66      	ldr	r3, [pc, #408]	; (80016ac <HAL_GPIO_Init+0x324>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	4a65      	ldr	r2, [pc, #404]	; (80016ac <HAL_GPIO_Init+0x324>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151c:	6453      	str	r3, [r2, #68]	; 0x44
 800151e:	4b63      	ldr	r3, [pc, #396]	; (80016ac <HAL_GPIO_Init+0x324>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800152a:	4a61      	ldr	r2, [pc, #388]	; (80016b0 <HAL_GPIO_Init+0x328>)
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	089b      	lsrs	r3, r3, #2
 8001530:	3302      	adds	r3, #2
 8001532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	220f      	movs	r2, #15
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a58      	ldr	r2, [pc, #352]	; (80016b4 <HAL_GPIO_Init+0x32c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d037      	beq.n	80015c6 <HAL_GPIO_Init+0x23e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a57      	ldr	r2, [pc, #348]	; (80016b8 <HAL_GPIO_Init+0x330>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d031      	beq.n	80015c2 <HAL_GPIO_Init+0x23a>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a56      	ldr	r2, [pc, #344]	; (80016bc <HAL_GPIO_Init+0x334>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d02b      	beq.n	80015be <HAL_GPIO_Init+0x236>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a55      	ldr	r2, [pc, #340]	; (80016c0 <HAL_GPIO_Init+0x338>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d025      	beq.n	80015ba <HAL_GPIO_Init+0x232>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a54      	ldr	r2, [pc, #336]	; (80016c4 <HAL_GPIO_Init+0x33c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d01f      	beq.n	80015b6 <HAL_GPIO_Init+0x22e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a53      	ldr	r2, [pc, #332]	; (80016c8 <HAL_GPIO_Init+0x340>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d019      	beq.n	80015b2 <HAL_GPIO_Init+0x22a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a52      	ldr	r2, [pc, #328]	; (80016cc <HAL_GPIO_Init+0x344>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d013      	beq.n	80015ae <HAL_GPIO_Init+0x226>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a51      	ldr	r2, [pc, #324]	; (80016d0 <HAL_GPIO_Init+0x348>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00d      	beq.n	80015aa <HAL_GPIO_Init+0x222>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a50      	ldr	r2, [pc, #320]	; (80016d4 <HAL_GPIO_Init+0x34c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d007      	beq.n	80015a6 <HAL_GPIO_Init+0x21e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4f      	ldr	r2, [pc, #316]	; (80016d8 <HAL_GPIO_Init+0x350>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d101      	bne.n	80015a2 <HAL_GPIO_Init+0x21a>
 800159e:	2309      	movs	r3, #9
 80015a0:	e012      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015a2:	230a      	movs	r3, #10
 80015a4:	e010      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015a6:	2308      	movs	r3, #8
 80015a8:	e00e      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015aa:	2307      	movs	r3, #7
 80015ac:	e00c      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015ae:	2306      	movs	r3, #6
 80015b0:	e00a      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015b2:	2305      	movs	r3, #5
 80015b4:	e008      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015b6:	2304      	movs	r3, #4
 80015b8:	e006      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015ba:	2303      	movs	r3, #3
 80015bc:	e004      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015be:	2302      	movs	r3, #2
 80015c0:	e002      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015c6:	2300      	movs	r3, #0
 80015c8:	69fa      	ldr	r2, [r7, #28]
 80015ca:	f002 0203 	and.w	r2, r2, #3
 80015ce:	0092      	lsls	r2, r2, #2
 80015d0:	4093      	lsls	r3, r2
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d8:	4935      	ldr	r1, [pc, #212]	; (80016b0 <HAL_GPIO_Init+0x328>)
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015e6:	4b3d      	ldr	r3, [pc, #244]	; (80016dc <HAL_GPIO_Init+0x354>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800160a:	4a34      	ldr	r2, [pc, #208]	; (80016dc <HAL_GPIO_Init+0x354>)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001610:	4b32      	ldr	r3, [pc, #200]	; (80016dc <HAL_GPIO_Init+0x354>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001634:	4a29      	ldr	r2, [pc, #164]	; (80016dc <HAL_GPIO_Init+0x354>)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800163a:	4b28      	ldr	r3, [pc, #160]	; (80016dc <HAL_GPIO_Init+0x354>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800165e:	4a1f      	ldr	r2, [pc, #124]	; (80016dc <HAL_GPIO_Init+0x354>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001664:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <HAL_GPIO_Init+0x354>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001688:	4a14      	ldr	r2, [pc, #80]	; (80016dc <HAL_GPIO_Init+0x354>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3301      	adds	r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	2b0f      	cmp	r3, #15
 8001698:	f67f ae84 	bls.w	80013a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3724      	adds	r7, #36	; 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40013800 	.word	0x40013800
 80016b4:	40020000 	.word	0x40020000
 80016b8:	40020400 	.word	0x40020400
 80016bc:	40020800 	.word	0x40020800
 80016c0:	40020c00 	.word	0x40020c00
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40021400 	.word	0x40021400
 80016cc:	40021800 	.word	0x40021800
 80016d0:	40021c00 	.word	0x40021c00
 80016d4:	40022000 	.word	0x40022000
 80016d8:	40022400 	.word	0x40022400
 80016dc:	40013c00 	.word	0x40013c00

080016e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	887b      	ldrh	r3, [r7, #2]
 80016f2:	4013      	ands	r3, r2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d002      	beq.n	80016fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016f8:	2301      	movs	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
 80016fc:	e001      	b.n	8001702 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016fe:	2300      	movs	r3, #0
 8001700:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
 800171c:	4613      	mov	r3, r2
 800171e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001720:	787b      	ldrb	r3, [r7, #1]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001726:	887a      	ldrh	r2, [r7, #2]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800172c:	e003      	b.n	8001736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800172e:	887b      	ldrh	r3, [r7, #2]
 8001730:	041a      	lsls	r2, r3, #16
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	619a      	str	r2, [r3, #24]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e267      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d075      	beq.n	800184e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001762:	4b88      	ldr	r3, [pc, #544]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b04      	cmp	r3, #4
 800176c:	d00c      	beq.n	8001788 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800176e:	4b85      	ldr	r3, [pc, #532]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001776:	2b08      	cmp	r3, #8
 8001778:	d112      	bne.n	80017a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800177a:	4b82      	ldr	r3, [pc, #520]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001786:	d10b      	bne.n	80017a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001788:	4b7e      	ldr	r3, [pc, #504]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d05b      	beq.n	800184c <HAL_RCC_OscConfig+0x108>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d157      	bne.n	800184c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e242      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a8:	d106      	bne.n	80017b8 <HAL_RCC_OscConfig+0x74>
 80017aa:	4b76      	ldr	r3, [pc, #472]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a75      	ldr	r2, [pc, #468]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e01d      	b.n	80017f4 <HAL_RCC_OscConfig+0xb0>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0x98>
 80017c2:	4b70      	ldr	r3, [pc, #448]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a6f      	ldr	r2, [pc, #444]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	4b6d      	ldr	r3, [pc, #436]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a6c      	ldr	r2, [pc, #432]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e00b      	b.n	80017f4 <HAL_RCC_OscConfig+0xb0>
 80017dc:	4b69      	ldr	r3, [pc, #420]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a68      	ldr	r2, [pc, #416]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	4b66      	ldr	r3, [pc, #408]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a65      	ldr	r2, [pc, #404]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d013      	beq.n	8001824 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff fc82 	bl	8001104 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001804:	f7ff fc7e 	bl	8001104 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b64      	cmp	r3, #100	; 0x64
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e207      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	4b5b      	ldr	r3, [pc, #364]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0xc0>
 8001822:	e014      	b.n	800184e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001824:	f7ff fc6e 	bl	8001104 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800182c:	f7ff fc6a 	bl	8001104 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b64      	cmp	r3, #100	; 0x64
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e1f3      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183e:	4b51      	ldr	r3, [pc, #324]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0xe8>
 800184a:	e000      	b.n	800184e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d063      	beq.n	8001922 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800185a:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00b      	beq.n	800187e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001866:	4b47      	ldr	r3, [pc, #284]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800186e:	2b08      	cmp	r3, #8
 8001870:	d11c      	bne.n	80018ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001872:	4b44      	ldr	r3, [pc, #272]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d116      	bne.n	80018ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187e:	4b41      	ldr	r3, [pc, #260]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d005      	beq.n	8001896 <HAL_RCC_OscConfig+0x152>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d001      	beq.n	8001896 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e1c7      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001896:	4b3b      	ldr	r3, [pc, #236]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4937      	ldr	r1, [pc, #220]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018aa:	e03a      	b.n	8001922 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d020      	beq.n	80018f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b4:	4b34      	ldr	r3, [pc, #208]	; (8001988 <HAL_RCC_OscConfig+0x244>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ba:	f7ff fc23 	bl	8001104 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c2:	f7ff fc1f 	bl	8001104 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e1a8      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d4:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e0:	4b28      	ldr	r3, [pc, #160]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4925      	ldr	r1, [pc, #148]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	600b      	str	r3, [r1, #0]
 80018f4:	e015      	b.n	8001922 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f6:	4b24      	ldr	r3, [pc, #144]	; (8001988 <HAL_RCC_OscConfig+0x244>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff fc02 	bl	8001104 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001904:	f7ff fbfe 	bl	8001104 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e187      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d036      	beq.n	800199c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d016      	beq.n	8001964 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <HAL_RCC_OscConfig+0x248>)
 8001938:	2201      	movs	r2, #1
 800193a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193c:	f7ff fbe2 	bl	8001104 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff fbde 	bl	8001104 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e167      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x200>
 8001962:	e01b      	b.n	800199c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_RCC_OscConfig+0x248>)
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196a:	f7ff fbcb 	bl	8001104 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001970:	e00e      	b.n	8001990 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001972:	f7ff fbc7 	bl	8001104 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d907      	bls.n	8001990 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e150      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
 8001984:	40023800 	.word	0x40023800
 8001988:	42470000 	.word	0x42470000
 800198c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001990:	4b88      	ldr	r3, [pc, #544]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1ea      	bne.n	8001972 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 8097 	beq.w	8001ad8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ae:	4b81      	ldr	r3, [pc, #516]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10f      	bne.n	80019da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	4b7d      	ldr	r3, [pc, #500]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a7c      	ldr	r2, [pc, #496]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b7a      	ldr	r3, [pc, #488]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d6:	2301      	movs	r3, #1
 80019d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019da:	4b77      	ldr	r3, [pc, #476]	; (8001bb8 <HAL_RCC_OscConfig+0x474>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d118      	bne.n	8001a18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e6:	4b74      	ldr	r3, [pc, #464]	; (8001bb8 <HAL_RCC_OscConfig+0x474>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a73      	ldr	r2, [pc, #460]	; (8001bb8 <HAL_RCC_OscConfig+0x474>)
 80019ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f2:	f7ff fb87 	bl	8001104 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019fa:	f7ff fb83 	bl	8001104 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e10c      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0c:	4b6a      	ldr	r3, [pc, #424]	; (8001bb8 <HAL_RCC_OscConfig+0x474>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d106      	bne.n	8001a2e <HAL_RCC_OscConfig+0x2ea>
 8001a20:	4b64      	ldr	r3, [pc, #400]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a24:	4a63      	ldr	r2, [pc, #396]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2c:	e01c      	b.n	8001a68 <HAL_RCC_OscConfig+0x324>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d10c      	bne.n	8001a50 <HAL_RCC_OscConfig+0x30c>
 8001a36:	4b5f      	ldr	r3, [pc, #380]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3a:	4a5e      	ldr	r2, [pc, #376]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	6713      	str	r3, [r2, #112]	; 0x70
 8001a42:	4b5c      	ldr	r3, [pc, #368]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a46:	4a5b      	ldr	r2, [pc, #364]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4e:	e00b      	b.n	8001a68 <HAL_RCC_OscConfig+0x324>
 8001a50:	4b58      	ldr	r3, [pc, #352]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a54:	4a57      	ldr	r2, [pc, #348]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5c:	4b55      	ldr	r3, [pc, #340]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a60:	4a54      	ldr	r2, [pc, #336]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a62:	f023 0304 	bic.w	r3, r3, #4
 8001a66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d015      	beq.n	8001a9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a70:	f7ff fb48 	bl	8001104 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a76:	e00a      	b.n	8001a8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a78:	f7ff fb44 	bl	8001104 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e0cb      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8e:	4b49      	ldr	r3, [pc, #292]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0ee      	beq.n	8001a78 <HAL_RCC_OscConfig+0x334>
 8001a9a:	e014      	b.n	8001ac6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9c:	f7ff fb32 	bl	8001104 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa2:	e00a      	b.n	8001aba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa4:	f7ff fb2e 	bl	8001104 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e0b5      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aba:	4b3e      	ldr	r3, [pc, #248]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1ee      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ac6:	7dfb      	ldrb	r3, [r7, #23]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d105      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001acc:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	4a38      	ldr	r2, [pc, #224]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 80a1 	beq.w	8001c24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ae2:	4b34      	ldr	r3, [pc, #208]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d05c      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d141      	bne.n	8001b7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af6:	4b31      	ldr	r3, [pc, #196]	; (8001bbc <HAL_RCC_OscConfig+0x478>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7ff fb02 	bl	8001104 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b04:	f7ff fafe 	bl	8001104 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e087      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b16:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69da      	ldr	r2, [r3, #28]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	019b      	lsls	r3, r3, #6
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b38:	085b      	lsrs	r3, r3, #1
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	041b      	lsls	r3, r3, #16
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	061b      	lsls	r3, r3, #24
 8001b46:	491b      	ldr	r1, [pc, #108]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <HAL_RCC_OscConfig+0x478>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b52:	f7ff fad7 	bl	8001104 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b5a:	f7ff fad3 	bl	8001104 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e05c      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x416>
 8001b78:	e054      	b.n	8001c24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_RCC_OscConfig+0x478>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff fac0 	bl	8001104 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b88:	f7ff fabc 	bl	8001104 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e045      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x444>
 8001ba6:	e03d      	b.n	8001c24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d107      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e038      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40007000 	.word	0x40007000
 8001bbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <HAL_RCC_OscConfig+0x4ec>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d028      	beq.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d121      	bne.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d11a      	bne.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d111      	bne.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	085b      	lsrs	r3, r3, #1
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d107      	bne.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800

08001c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0cc      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c48:	4b68      	ldr	r3, [pc, #416]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d90c      	bls.n	8001c70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c56:	4b65      	ldr	r3, [pc, #404]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5e:	4b63      	ldr	r3, [pc, #396]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d001      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0b8      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d020      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c88:	4b59      	ldr	r3, [pc, #356]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	4a58      	ldr	r2, [pc, #352]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d005      	beq.n	8001cac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ca0:	4b53      	ldr	r3, [pc, #332]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	4a52      	ldr	r2, [pc, #328]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001caa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cac:	4b50      	ldr	r3, [pc, #320]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	494d      	ldr	r1, [pc, #308]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d044      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d107      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd2:	4b47      	ldr	r3, [pc, #284]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d119      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e07f      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d003      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d107      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf2:	4b3f      	ldr	r3, [pc, #252]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d109      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e06f      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d02:	4b3b      	ldr	r3, [pc, #236]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e067      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d12:	4b37      	ldr	r3, [pc, #220]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f023 0203 	bic.w	r2, r3, #3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	4934      	ldr	r1, [pc, #208]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d24:	f7ff f9ee 	bl	8001104 <HAL_GetTick>
 8001d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2a:	e00a      	b.n	8001d42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2c:	f7ff f9ea 	bl	8001104 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e04f      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d42:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 020c 	and.w	r2, r3, #12
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d1eb      	bne.n	8001d2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d54:	4b25      	ldr	r3, [pc, #148]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d20c      	bcs.n	8001d7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b22      	ldr	r3, [pc, #136]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e032      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d88:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	4916      	ldr	r1, [pc, #88]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d009      	beq.n	8001dba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	490e      	ldr	r1, [pc, #56]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dba:	f000 f821 	bl	8001e00 <HAL_RCC_GetSysClockFreq>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	490a      	ldr	r1, [pc, #40]	; (8001df4 <HAL_RCC_ClockConfig+0x1c0>)
 8001dcc:	5ccb      	ldrb	r3, [r1, r3]
 8001dce:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd2:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_RCC_ClockConfig+0x1c8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff f94e 	bl	800107c <HAL_InitTick>

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023c00 	.word	0x40023c00
 8001df0:	40023800 	.word	0x40023800
 8001df4:	08003e94 	.word	0x08003e94
 8001df8:	20000018 	.word	0x20000018
 8001dfc:	2000001c 	.word	0x2000001c

08001e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e04:	b094      	sub	sp, #80	; 0x50
 8001e06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	647b      	str	r3, [r7, #68]	; 0x44
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e10:	2300      	movs	r3, #0
 8001e12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e18:	4b79      	ldr	r3, [pc, #484]	; (8002000 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d00d      	beq.n	8001e40 <HAL_RCC_GetSysClockFreq+0x40>
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	f200 80e1 	bhi.w	8001fec <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d002      	beq.n	8001e34 <HAL_RCC_GetSysClockFreq+0x34>
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d003      	beq.n	8001e3a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e32:	e0db      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e34:	4b73      	ldr	r3, [pc, #460]	; (8002004 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e38:	e0db      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e3a:	4b73      	ldr	r3, [pc, #460]	; (8002008 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e3e:	e0d8      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e40:	4b6f      	ldr	r3, [pc, #444]	; (8002000 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e4a:	4b6d      	ldr	r3, [pc, #436]	; (8002000 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d063      	beq.n	8001f1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e56:	4b6a      	ldr	r3, [pc, #424]	; (8002000 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	099b      	lsrs	r3, r3, #6
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e68:	633b      	str	r3, [r7, #48]	; 0x30
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e72:	4622      	mov	r2, r4
 8001e74:	462b      	mov	r3, r5
 8001e76:	f04f 0000 	mov.w	r0, #0
 8001e7a:	f04f 0100 	mov.w	r1, #0
 8001e7e:	0159      	lsls	r1, r3, #5
 8001e80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e84:	0150      	lsls	r0, r2, #5
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	1a51      	subs	r1, r2, r1
 8001e8e:	6139      	str	r1, [r7, #16]
 8001e90:	4629      	mov	r1, r5
 8001e92:	eb63 0301 	sbc.w	r3, r3, r1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ea4:	4659      	mov	r1, fp
 8001ea6:	018b      	lsls	r3, r1, #6
 8001ea8:	4651      	mov	r1, sl
 8001eaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001eae:	4651      	mov	r1, sl
 8001eb0:	018a      	lsls	r2, r1, #6
 8001eb2:	4651      	mov	r1, sl
 8001eb4:	ebb2 0801 	subs.w	r8, r2, r1
 8001eb8:	4659      	mov	r1, fp
 8001eba:	eb63 0901 	sbc.w	r9, r3, r1
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ed2:	4690      	mov	r8, r2
 8001ed4:	4699      	mov	r9, r3
 8001ed6:	4623      	mov	r3, r4
 8001ed8:	eb18 0303 	adds.w	r3, r8, r3
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	462b      	mov	r3, r5
 8001ee0:	eb49 0303 	adc.w	r3, r9, r3
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ef2:	4629      	mov	r1, r5
 8001ef4:	024b      	lsls	r3, r1, #9
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001efc:	4621      	mov	r1, r4
 8001efe:	024a      	lsls	r2, r1, #9
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f06:	2200      	movs	r2, #0
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f10:	f7fe f9be 	bl	8000290 <__aeabi_uldivmod>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4613      	mov	r3, r2
 8001f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f1c:	e058      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f1e:	4b38      	ldr	r3, [pc, #224]	; (8002000 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	099b      	lsrs	r3, r3, #6
 8001f24:	2200      	movs	r2, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	4611      	mov	r1, r2
 8001f2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f2e:	623b      	str	r3, [r7, #32]
 8001f30:	2300      	movs	r3, #0
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
 8001f34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f38:	4642      	mov	r2, r8
 8001f3a:	464b      	mov	r3, r9
 8001f3c:	f04f 0000 	mov.w	r0, #0
 8001f40:	f04f 0100 	mov.w	r1, #0
 8001f44:	0159      	lsls	r1, r3, #5
 8001f46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f4a:	0150      	lsls	r0, r2, #5
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4641      	mov	r1, r8
 8001f52:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f56:	4649      	mov	r1, r9
 8001f58:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f70:	ebb2 040a 	subs.w	r4, r2, sl
 8001f74:	eb63 050b 	sbc.w	r5, r3, fp
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	f04f 0300 	mov.w	r3, #0
 8001f80:	00eb      	lsls	r3, r5, #3
 8001f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f86:	00e2      	lsls	r2, r4, #3
 8001f88:	4614      	mov	r4, r2
 8001f8a:	461d      	mov	r5, r3
 8001f8c:	4643      	mov	r3, r8
 8001f8e:	18e3      	adds	r3, r4, r3
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	464b      	mov	r3, r9
 8001f94:	eb45 0303 	adc.w	r3, r5, r3
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fa6:	4629      	mov	r1, r5
 8001fa8:	028b      	lsls	r3, r1, #10
 8001faa:	4621      	mov	r1, r4
 8001fac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fb0:	4621      	mov	r1, r4
 8001fb2:	028a      	lsls	r2, r1, #10
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	61fa      	str	r2, [r7, #28]
 8001fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fc4:	f7fe f964 	bl	8000290 <__aeabi_uldivmod>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4613      	mov	r3, r2
 8001fce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	0c1b      	lsrs	r3, r3, #16
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001fe0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fea:	e002      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3750      	adds	r7, #80	; 0x50
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800
 8002004:	00f42400 	.word	0x00f42400
 8002008:	007a1200 	.word	0x007a1200

0800200c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <HAL_RCC_GetHCLKFreq+0x14>)
 8002012:	681b      	ldr	r3, [r3, #0]
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000018 	.word	0x20000018

08002024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002028:	f7ff fff0 	bl	800200c <HAL_RCC_GetHCLKFreq>
 800202c:	4602      	mov	r2, r0
 800202e:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	0a9b      	lsrs	r3, r3, #10
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	4903      	ldr	r1, [pc, #12]	; (8002048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800203a:	5ccb      	ldrb	r3, [r1, r3]
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002040:	4618      	mov	r0, r3
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40023800 	.word	0x40023800
 8002048:	08003ea4 	.word	0x08003ea4

0800204c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002050:	f7ff ffdc 	bl	800200c <HAL_RCC_GetHCLKFreq>
 8002054:	4602      	mov	r2, r0
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	0b5b      	lsrs	r3, r3, #13
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	4903      	ldr	r1, [pc, #12]	; (8002070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002062:	5ccb      	ldrb	r3, [r1, r3]
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002068:	4618      	mov	r0, r3
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40023800 	.word	0x40023800
 8002070:	08003ea4 	.word	0x08003ea4

08002074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e041      	b.n	800210a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d106      	bne.n	80020a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7fe fe48 	bl	8000d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3304      	adds	r3, #4
 80020b0:	4619      	mov	r1, r3
 80020b2:	4610      	mov	r0, r2
 80020b4:	f000 fa96 	bl	80025e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b01      	cmp	r3, #1
 8002126:	d001      	beq.n	800212c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e04e      	b.n	80021ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a23      	ldr	r2, [pc, #140]	; (80021d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d022      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x80>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002156:	d01d      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x80>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a1f      	ldr	r2, [pc, #124]	; (80021dc <HAL_TIM_Base_Start_IT+0xc8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d018      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x80>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1e      	ldr	r2, [pc, #120]	; (80021e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d013      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x80>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00e      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x80>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1b      	ldr	r2, [pc, #108]	; (80021e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d009      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x80>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a19      	ldr	r2, [pc, #100]	; (80021ec <HAL_TIM_Base_Start_IT+0xd8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d004      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x80>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a18      	ldr	r2, [pc, #96]	; (80021f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d111      	bne.n	80021b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b06      	cmp	r3, #6
 80021a4:	d010      	beq.n	80021c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0201 	orr.w	r2, r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b6:	e007      	b.n	80021c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40010000 	.word	0x40010000
 80021dc:	40000400 	.word	0x40000400
 80021e0:	40000800 	.word	0x40000800
 80021e4:	40000c00 	.word	0x40000c00
 80021e8:	40010400 	.word	0x40010400
 80021ec:	40014000 	.word	0x40014000
 80021f0:	40001800 	.word	0x40001800

080021f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b02      	cmp	r3, #2
 8002208:	d122      	bne.n	8002250 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b02      	cmp	r3, #2
 8002216:	d11b      	bne.n	8002250 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f06f 0202 	mvn.w	r2, #2
 8002220:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f9b5 	bl	80025a6 <HAL_TIM_IC_CaptureCallback>
 800223c:	e005      	b.n	800224a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f9a7 	bl	8002592 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f9b8 	bl	80025ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b04      	cmp	r3, #4
 800225c:	d122      	bne.n	80022a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b04      	cmp	r3, #4
 800226a:	d11b      	bne.n	80022a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f06f 0204 	mvn.w	r2, #4
 8002274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2202      	movs	r2, #2
 800227a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f98b 	bl	80025a6 <HAL_TIM_IC_CaptureCallback>
 8002290:	e005      	b.n	800229e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f97d 	bl	8002592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f98e 	bl	80025ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d122      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d11b      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0208 	mvn.w	r2, #8
 80022c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2204      	movs	r2, #4
 80022ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f961 	bl	80025a6 <HAL_TIM_IC_CaptureCallback>
 80022e4:	e005      	b.n	80022f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f953 	bl	8002592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f964 	bl	80025ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	2b10      	cmp	r3, #16
 8002304:	d122      	bne.n	800234c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b10      	cmp	r3, #16
 8002312:	d11b      	bne.n	800234c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0210 	mvn.w	r2, #16
 800231c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2208      	movs	r2, #8
 8002322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f937 	bl	80025a6 <HAL_TIM_IC_CaptureCallback>
 8002338:	e005      	b.n	8002346 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f929 	bl	8002592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f93a 	bl	80025ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b01      	cmp	r3, #1
 8002358:	d10e      	bne.n	8002378 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b01      	cmp	r3, #1
 8002366:	d107      	bne.n	8002378 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0201 	mvn.w	r2, #1
 8002370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7fe fc0a 	bl	8000b8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002382:	2b80      	cmp	r3, #128	; 0x80
 8002384:	d10e      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002390:	2b80      	cmp	r3, #128	; 0x80
 8002392:	d107      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800239c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fae0 	bl	8002964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ae:	2b40      	cmp	r3, #64	; 0x40
 80023b0:	d10e      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023bc:	2b40      	cmp	r3, #64	; 0x40
 80023be:	d107      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f8ff 	bl	80025ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0320 	and.w	r3, r3, #32
 80023da:	2b20      	cmp	r3, #32
 80023dc:	d10e      	bne.n	80023fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b20      	cmp	r3, #32
 80023ea:	d107      	bne.n	80023fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0220 	mvn.w	r2, #32
 80023f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 faaa 	bl	8002950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_TIM_ConfigClockSource+0x1c>
 800241c:	2302      	movs	r3, #2
 800241e:	e0b4      	b.n	800258a <HAL_TIM_ConfigClockSource+0x186>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800243e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002446:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002458:	d03e      	beq.n	80024d8 <HAL_TIM_ConfigClockSource+0xd4>
 800245a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800245e:	f200 8087 	bhi.w	8002570 <HAL_TIM_ConfigClockSource+0x16c>
 8002462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002466:	f000 8086 	beq.w	8002576 <HAL_TIM_ConfigClockSource+0x172>
 800246a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800246e:	d87f      	bhi.n	8002570 <HAL_TIM_ConfigClockSource+0x16c>
 8002470:	2b70      	cmp	r3, #112	; 0x70
 8002472:	d01a      	beq.n	80024aa <HAL_TIM_ConfigClockSource+0xa6>
 8002474:	2b70      	cmp	r3, #112	; 0x70
 8002476:	d87b      	bhi.n	8002570 <HAL_TIM_ConfigClockSource+0x16c>
 8002478:	2b60      	cmp	r3, #96	; 0x60
 800247a:	d050      	beq.n	800251e <HAL_TIM_ConfigClockSource+0x11a>
 800247c:	2b60      	cmp	r3, #96	; 0x60
 800247e:	d877      	bhi.n	8002570 <HAL_TIM_ConfigClockSource+0x16c>
 8002480:	2b50      	cmp	r3, #80	; 0x50
 8002482:	d03c      	beq.n	80024fe <HAL_TIM_ConfigClockSource+0xfa>
 8002484:	2b50      	cmp	r3, #80	; 0x50
 8002486:	d873      	bhi.n	8002570 <HAL_TIM_ConfigClockSource+0x16c>
 8002488:	2b40      	cmp	r3, #64	; 0x40
 800248a:	d058      	beq.n	800253e <HAL_TIM_ConfigClockSource+0x13a>
 800248c:	2b40      	cmp	r3, #64	; 0x40
 800248e:	d86f      	bhi.n	8002570 <HAL_TIM_ConfigClockSource+0x16c>
 8002490:	2b30      	cmp	r3, #48	; 0x30
 8002492:	d064      	beq.n	800255e <HAL_TIM_ConfigClockSource+0x15a>
 8002494:	2b30      	cmp	r3, #48	; 0x30
 8002496:	d86b      	bhi.n	8002570 <HAL_TIM_ConfigClockSource+0x16c>
 8002498:	2b20      	cmp	r3, #32
 800249a:	d060      	beq.n	800255e <HAL_TIM_ConfigClockSource+0x15a>
 800249c:	2b20      	cmp	r3, #32
 800249e:	d867      	bhi.n	8002570 <HAL_TIM_ConfigClockSource+0x16c>
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d05c      	beq.n	800255e <HAL_TIM_ConfigClockSource+0x15a>
 80024a4:	2b10      	cmp	r3, #16
 80024a6:	d05a      	beq.n	800255e <HAL_TIM_ConfigClockSource+0x15a>
 80024a8:	e062      	b.n	8002570 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	6899      	ldr	r1, [r3, #8]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f000 f9ad 	bl	8002818 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	609a      	str	r2, [r3, #8]
      break;
 80024d6:	e04f      	b.n	8002578 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	6899      	ldr	r1, [r3, #8]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f000 f996 	bl	8002818 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024fa:	609a      	str	r2, [r3, #8]
      break;
 80024fc:	e03c      	b.n	8002578 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	6859      	ldr	r1, [r3, #4]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	461a      	mov	r2, r3
 800250c:	f000 f90a 	bl	8002724 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2150      	movs	r1, #80	; 0x50
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f963 	bl	80027e2 <TIM_ITRx_SetConfig>
      break;
 800251c:	e02c      	b.n	8002578 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	6859      	ldr	r1, [r3, #4]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	461a      	mov	r2, r3
 800252c:	f000 f929 	bl	8002782 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2160      	movs	r1, #96	; 0x60
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f953 	bl	80027e2 <TIM_ITRx_SetConfig>
      break;
 800253c:	e01c      	b.n	8002578 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6859      	ldr	r1, [r3, #4]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	461a      	mov	r2, r3
 800254c:	f000 f8ea 	bl	8002724 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2140      	movs	r1, #64	; 0x40
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f943 	bl	80027e2 <TIM_ITRx_SetConfig>
      break;
 800255c:	e00c      	b.n	8002578 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4619      	mov	r1, r3
 8002568:	4610      	mov	r0, r2
 800256a:	f000 f93a 	bl	80027e2 <TIM_ITRx_SetConfig>
      break;
 800256e:	e003      	b.n	8002578 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
      break;
 8002574:	e000      	b.n	8002578 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002576:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002588:	7bfb      	ldrb	r3, [r7, #15]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a40      	ldr	r2, [pc, #256]	; (80026f8 <TIM_Base_SetConfig+0x114>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d013      	beq.n	8002624 <TIM_Base_SetConfig+0x40>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002602:	d00f      	beq.n	8002624 <TIM_Base_SetConfig+0x40>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a3d      	ldr	r2, [pc, #244]	; (80026fc <TIM_Base_SetConfig+0x118>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d00b      	beq.n	8002624 <TIM_Base_SetConfig+0x40>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a3c      	ldr	r2, [pc, #240]	; (8002700 <TIM_Base_SetConfig+0x11c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d007      	beq.n	8002624 <TIM_Base_SetConfig+0x40>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a3b      	ldr	r2, [pc, #236]	; (8002704 <TIM_Base_SetConfig+0x120>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d003      	beq.n	8002624 <TIM_Base_SetConfig+0x40>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a3a      	ldr	r2, [pc, #232]	; (8002708 <TIM_Base_SetConfig+0x124>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d108      	bne.n	8002636 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800262a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	4313      	orrs	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a2f      	ldr	r2, [pc, #188]	; (80026f8 <TIM_Base_SetConfig+0x114>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d02b      	beq.n	8002696 <TIM_Base_SetConfig+0xb2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002644:	d027      	beq.n	8002696 <TIM_Base_SetConfig+0xb2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a2c      	ldr	r2, [pc, #176]	; (80026fc <TIM_Base_SetConfig+0x118>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d023      	beq.n	8002696 <TIM_Base_SetConfig+0xb2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a2b      	ldr	r2, [pc, #172]	; (8002700 <TIM_Base_SetConfig+0x11c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d01f      	beq.n	8002696 <TIM_Base_SetConfig+0xb2>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a2a      	ldr	r2, [pc, #168]	; (8002704 <TIM_Base_SetConfig+0x120>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d01b      	beq.n	8002696 <TIM_Base_SetConfig+0xb2>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a29      	ldr	r2, [pc, #164]	; (8002708 <TIM_Base_SetConfig+0x124>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d017      	beq.n	8002696 <TIM_Base_SetConfig+0xb2>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a28      	ldr	r2, [pc, #160]	; (800270c <TIM_Base_SetConfig+0x128>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d013      	beq.n	8002696 <TIM_Base_SetConfig+0xb2>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a27      	ldr	r2, [pc, #156]	; (8002710 <TIM_Base_SetConfig+0x12c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d00f      	beq.n	8002696 <TIM_Base_SetConfig+0xb2>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a26      	ldr	r2, [pc, #152]	; (8002714 <TIM_Base_SetConfig+0x130>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00b      	beq.n	8002696 <TIM_Base_SetConfig+0xb2>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a25      	ldr	r2, [pc, #148]	; (8002718 <TIM_Base_SetConfig+0x134>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <TIM_Base_SetConfig+0xb2>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a24      	ldr	r2, [pc, #144]	; (800271c <TIM_Base_SetConfig+0x138>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d003      	beq.n	8002696 <TIM_Base_SetConfig+0xb2>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a23      	ldr	r2, [pc, #140]	; (8002720 <TIM_Base_SetConfig+0x13c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d108      	bne.n	80026a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800269c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <TIM_Base_SetConfig+0x114>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d003      	beq.n	80026dc <TIM_Base_SetConfig+0xf8>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a0c      	ldr	r2, [pc, #48]	; (8002708 <TIM_Base_SetConfig+0x124>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d103      	bne.n	80026e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	615a      	str	r2, [r3, #20]
}
 80026ea:	bf00      	nop
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40010000 	.word	0x40010000
 80026fc:	40000400 	.word	0x40000400
 8002700:	40000800 	.word	0x40000800
 8002704:	40000c00 	.word	0x40000c00
 8002708:	40010400 	.word	0x40010400
 800270c:	40014000 	.word	0x40014000
 8002710:	40014400 	.word	0x40014400
 8002714:	40014800 	.word	0x40014800
 8002718:	40001800 	.word	0x40001800
 800271c:	40001c00 	.word	0x40001c00
 8002720:	40002000 	.word	0x40002000

08002724 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	f023 0201 	bic.w	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800274e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f023 030a 	bic.w	r3, r3, #10
 8002760:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	4313      	orrs	r3, r2
 8002768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	621a      	str	r2, [r3, #32]
}
 8002776:	bf00      	nop
 8002778:	371c      	adds	r7, #28
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002782:	b480      	push	{r7}
 8002784:	b087      	sub	sp, #28
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	f023 0210 	bic.w	r2, r3, #16
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	031b      	lsls	r3, r3, #12
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	621a      	str	r2, [r3, #32]
}
 80027d6:	bf00      	nop
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b085      	sub	sp, #20
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	f043 0307 	orr.w	r3, r3, #7
 8002804:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	609a      	str	r2, [r3, #8]
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002832:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	021a      	lsls	r2, r3, #8
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	431a      	orrs	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4313      	orrs	r3, r2
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	4313      	orrs	r3, r2
 8002844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	609a      	str	r2, [r3, #8]
}
 800284c:	bf00      	nop
 800284e:	371c      	adds	r7, #28
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800286c:	2302      	movs	r3, #2
 800286e:	e05a      	b.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a21      	ldr	r2, [pc, #132]	; (8002934 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d022      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028bc:	d01d      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1d      	ldr	r2, [pc, #116]	; (8002938 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d018      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1b      	ldr	r2, [pc, #108]	; (800293c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d013      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a1a      	ldr	r2, [pc, #104]	; (8002940 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d00e      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a18      	ldr	r2, [pc, #96]	; (8002944 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d009      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a17      	ldr	r2, [pc, #92]	; (8002948 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d004      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a15      	ldr	r2, [pc, #84]	; (800294c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d10c      	bne.n	8002914 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	4313      	orrs	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40010000 	.word	0x40010000
 8002938:	40000400 	.word	0x40000400
 800293c:	40000800 	.word	0x40000800
 8002940:	40000c00 	.word	0x40000c00
 8002944:	40010400 	.word	0x40010400
 8002948:	40014000 	.word	0x40014000
 800294c:	40001800 	.word	0x40001800

08002950 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e03f      	b.n	8002a0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7fe f9ee 	bl	8000d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2224      	movs	r2, #36	; 0x24
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 f829 	bl	8002a14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695a      	ldr	r2, [r3, #20]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a18:	b0c0      	sub	sp, #256	; 0x100
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a30:	68d9      	ldr	r1, [r3, #12]
 8002a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	ea40 0301 	orr.w	r3, r0, r1
 8002a3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a6c:	f021 010c 	bic.w	r1, r1, #12
 8002a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a7a:	430b      	orrs	r3, r1
 8002a7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a8e:	6999      	ldr	r1, [r3, #24]
 8002a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	ea40 0301 	orr.w	r3, r0, r1
 8002a9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	4b8f      	ldr	r3, [pc, #572]	; (8002ce0 <UART_SetConfig+0x2cc>)
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d005      	beq.n	8002ab4 <UART_SetConfig+0xa0>
 8002aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	4b8d      	ldr	r3, [pc, #564]	; (8002ce4 <UART_SetConfig+0x2d0>)
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d104      	bne.n	8002abe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ab4:	f7ff faca 	bl	800204c <HAL_RCC_GetPCLK2Freq>
 8002ab8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002abc:	e003      	b.n	8002ac6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002abe:	f7ff fab1 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 8002ac2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ad0:	f040 810c 	bne.w	8002cec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ade:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ae2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ae6:	4622      	mov	r2, r4
 8002ae8:	462b      	mov	r3, r5
 8002aea:	1891      	adds	r1, r2, r2
 8002aec:	65b9      	str	r1, [r7, #88]	; 0x58
 8002aee:	415b      	adcs	r3, r3
 8002af0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002af2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002af6:	4621      	mov	r1, r4
 8002af8:	eb12 0801 	adds.w	r8, r2, r1
 8002afc:	4629      	mov	r1, r5
 8002afe:	eb43 0901 	adc.w	r9, r3, r1
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b16:	4690      	mov	r8, r2
 8002b18:	4699      	mov	r9, r3
 8002b1a:	4623      	mov	r3, r4
 8002b1c:	eb18 0303 	adds.w	r3, r8, r3
 8002b20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b24:	462b      	mov	r3, r5
 8002b26:	eb49 0303 	adc.w	r3, r9, r3
 8002b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b42:	460b      	mov	r3, r1
 8002b44:	18db      	adds	r3, r3, r3
 8002b46:	653b      	str	r3, [r7, #80]	; 0x50
 8002b48:	4613      	mov	r3, r2
 8002b4a:	eb42 0303 	adc.w	r3, r2, r3
 8002b4e:	657b      	str	r3, [r7, #84]	; 0x54
 8002b50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b58:	f7fd fb9a 	bl	8000290 <__aeabi_uldivmod>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4b61      	ldr	r3, [pc, #388]	; (8002ce8 <UART_SetConfig+0x2d4>)
 8002b62:	fba3 2302 	umull	r2, r3, r3, r2
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	011c      	lsls	r4, r3, #4
 8002b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b7c:	4642      	mov	r2, r8
 8002b7e:	464b      	mov	r3, r9
 8002b80:	1891      	adds	r1, r2, r2
 8002b82:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b84:	415b      	adcs	r3, r3
 8002b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b8c:	4641      	mov	r1, r8
 8002b8e:	eb12 0a01 	adds.w	sl, r2, r1
 8002b92:	4649      	mov	r1, r9
 8002b94:	eb43 0b01 	adc.w	fp, r3, r1
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ba4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ba8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bac:	4692      	mov	sl, r2
 8002bae:	469b      	mov	fp, r3
 8002bb0:	4643      	mov	r3, r8
 8002bb2:	eb1a 0303 	adds.w	r3, sl, r3
 8002bb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bba:	464b      	mov	r3, r9
 8002bbc:	eb4b 0303 	adc.w	r3, fp, r3
 8002bc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002bd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	18db      	adds	r3, r3, r3
 8002bdc:	643b      	str	r3, [r7, #64]	; 0x40
 8002bde:	4613      	mov	r3, r2
 8002be0:	eb42 0303 	adc.w	r3, r2, r3
 8002be4:	647b      	str	r3, [r7, #68]	; 0x44
 8002be6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002bee:	f7fd fb4f 	bl	8000290 <__aeabi_uldivmod>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4b3b      	ldr	r3, [pc, #236]	; (8002ce8 <UART_SetConfig+0x2d4>)
 8002bfa:	fba3 2301 	umull	r2, r3, r3, r1
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	2264      	movs	r2, #100	; 0x64
 8002c02:	fb02 f303 	mul.w	r3, r2, r3
 8002c06:	1acb      	subs	r3, r1, r3
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c0e:	4b36      	ldr	r3, [pc, #216]	; (8002ce8 <UART_SetConfig+0x2d4>)
 8002c10:	fba3 2302 	umull	r2, r3, r3, r2
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c1c:	441c      	add	r4, r3
 8002c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c22:	2200      	movs	r2, #0
 8002c24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c30:	4642      	mov	r2, r8
 8002c32:	464b      	mov	r3, r9
 8002c34:	1891      	adds	r1, r2, r2
 8002c36:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c38:	415b      	adcs	r3, r3
 8002c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c40:	4641      	mov	r1, r8
 8002c42:	1851      	adds	r1, r2, r1
 8002c44:	6339      	str	r1, [r7, #48]	; 0x30
 8002c46:	4649      	mov	r1, r9
 8002c48:	414b      	adcs	r3, r1
 8002c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c58:	4659      	mov	r1, fp
 8002c5a:	00cb      	lsls	r3, r1, #3
 8002c5c:	4651      	mov	r1, sl
 8002c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c62:	4651      	mov	r1, sl
 8002c64:	00ca      	lsls	r2, r1, #3
 8002c66:	4610      	mov	r0, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	4642      	mov	r2, r8
 8002c6e:	189b      	adds	r3, r3, r2
 8002c70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c74:	464b      	mov	r3, r9
 8002c76:	460a      	mov	r2, r1
 8002c78:	eb42 0303 	adc.w	r3, r2, r3
 8002c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c94:	460b      	mov	r3, r1
 8002c96:	18db      	adds	r3, r3, r3
 8002c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ca6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002caa:	f7fd faf1 	bl	8000290 <__aeabi_uldivmod>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <UART_SetConfig+0x2d4>)
 8002cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8002cb8:	095b      	lsrs	r3, r3, #5
 8002cba:	2164      	movs	r1, #100	; 0x64
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	3332      	adds	r3, #50	; 0x32
 8002cc6:	4a08      	ldr	r2, [pc, #32]	; (8002ce8 <UART_SetConfig+0x2d4>)
 8002cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ccc:	095b      	lsrs	r3, r3, #5
 8002cce:	f003 0207 	and.w	r2, r3, #7
 8002cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4422      	add	r2, r4
 8002cda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002cdc:	e106      	b.n	8002eec <UART_SetConfig+0x4d8>
 8002cde:	bf00      	nop
 8002ce0:	40011000 	.word	0x40011000
 8002ce4:	40011400 	.word	0x40011400
 8002ce8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002cf6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002cfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002cfe:	4642      	mov	r2, r8
 8002d00:	464b      	mov	r3, r9
 8002d02:	1891      	adds	r1, r2, r2
 8002d04:	6239      	str	r1, [r7, #32]
 8002d06:	415b      	adcs	r3, r3
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d0e:	4641      	mov	r1, r8
 8002d10:	1854      	adds	r4, r2, r1
 8002d12:	4649      	mov	r1, r9
 8002d14:	eb43 0501 	adc.w	r5, r3, r1
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	00eb      	lsls	r3, r5, #3
 8002d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d26:	00e2      	lsls	r2, r4, #3
 8002d28:	4614      	mov	r4, r2
 8002d2a:	461d      	mov	r5, r3
 8002d2c:	4643      	mov	r3, r8
 8002d2e:	18e3      	adds	r3, r4, r3
 8002d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d34:	464b      	mov	r3, r9
 8002d36:	eb45 0303 	adc.w	r3, r5, r3
 8002d3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d5a:	4629      	mov	r1, r5
 8002d5c:	008b      	lsls	r3, r1, #2
 8002d5e:	4621      	mov	r1, r4
 8002d60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d64:	4621      	mov	r1, r4
 8002d66:	008a      	lsls	r2, r1, #2
 8002d68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d6c:	f7fd fa90 	bl	8000290 <__aeabi_uldivmod>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4b60      	ldr	r3, [pc, #384]	; (8002ef8 <UART_SetConfig+0x4e4>)
 8002d76:	fba3 2302 	umull	r2, r3, r3, r2
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	011c      	lsls	r4, r3, #4
 8002d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d82:	2200      	movs	r2, #0
 8002d84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d90:	4642      	mov	r2, r8
 8002d92:	464b      	mov	r3, r9
 8002d94:	1891      	adds	r1, r2, r2
 8002d96:	61b9      	str	r1, [r7, #24]
 8002d98:	415b      	adcs	r3, r3
 8002d9a:	61fb      	str	r3, [r7, #28]
 8002d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002da0:	4641      	mov	r1, r8
 8002da2:	1851      	adds	r1, r2, r1
 8002da4:	6139      	str	r1, [r7, #16]
 8002da6:	4649      	mov	r1, r9
 8002da8:	414b      	adcs	r3, r1
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002db8:	4659      	mov	r1, fp
 8002dba:	00cb      	lsls	r3, r1, #3
 8002dbc:	4651      	mov	r1, sl
 8002dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dc2:	4651      	mov	r1, sl
 8002dc4:	00ca      	lsls	r2, r1, #3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4642      	mov	r2, r8
 8002dce:	189b      	adds	r3, r3, r2
 8002dd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002dd4:	464b      	mov	r3, r9
 8002dd6:	460a      	mov	r2, r1
 8002dd8:	eb42 0303 	adc.w	r3, r2, r3
 8002ddc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002df8:	4649      	mov	r1, r9
 8002dfa:	008b      	lsls	r3, r1, #2
 8002dfc:	4641      	mov	r1, r8
 8002dfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e02:	4641      	mov	r1, r8
 8002e04:	008a      	lsls	r2, r1, #2
 8002e06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e0a:	f7fd fa41 	bl	8000290 <__aeabi_uldivmod>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4611      	mov	r1, r2
 8002e14:	4b38      	ldr	r3, [pc, #224]	; (8002ef8 <UART_SetConfig+0x4e4>)
 8002e16:	fba3 2301 	umull	r2, r3, r3, r1
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	2264      	movs	r2, #100	; 0x64
 8002e1e:	fb02 f303 	mul.w	r3, r2, r3
 8002e22:	1acb      	subs	r3, r1, r3
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	3332      	adds	r3, #50	; 0x32
 8002e28:	4a33      	ldr	r2, [pc, #204]	; (8002ef8 <UART_SetConfig+0x4e4>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e34:	441c      	add	r4, r3
 8002e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	673b      	str	r3, [r7, #112]	; 0x70
 8002e3e:	677a      	str	r2, [r7, #116]	; 0x74
 8002e40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e44:	4642      	mov	r2, r8
 8002e46:	464b      	mov	r3, r9
 8002e48:	1891      	adds	r1, r2, r2
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	415b      	adcs	r3, r3
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e54:	4641      	mov	r1, r8
 8002e56:	1851      	adds	r1, r2, r1
 8002e58:	6039      	str	r1, [r7, #0]
 8002e5a:	4649      	mov	r1, r9
 8002e5c:	414b      	adcs	r3, r1
 8002e5e:	607b      	str	r3, [r7, #4]
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e6c:	4659      	mov	r1, fp
 8002e6e:	00cb      	lsls	r3, r1, #3
 8002e70:	4651      	mov	r1, sl
 8002e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e76:	4651      	mov	r1, sl
 8002e78:	00ca      	lsls	r2, r1, #3
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4642      	mov	r2, r8
 8002e82:	189b      	adds	r3, r3, r2
 8002e84:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e86:	464b      	mov	r3, r9
 8002e88:	460a      	mov	r2, r1
 8002e8a:	eb42 0303 	adc.w	r3, r2, r3
 8002e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	663b      	str	r3, [r7, #96]	; 0x60
 8002e9a:	667a      	str	r2, [r7, #100]	; 0x64
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ea8:	4649      	mov	r1, r9
 8002eaa:	008b      	lsls	r3, r1, #2
 8002eac:	4641      	mov	r1, r8
 8002eae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eb2:	4641      	mov	r1, r8
 8002eb4:	008a      	lsls	r2, r1, #2
 8002eb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002eba:	f7fd f9e9 	bl	8000290 <__aeabi_uldivmod>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <UART_SetConfig+0x4e4>)
 8002ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ec8:	095b      	lsrs	r3, r3, #5
 8002eca:	2164      	movs	r1, #100	; 0x64
 8002ecc:	fb01 f303 	mul.w	r3, r1, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	3332      	adds	r3, #50	; 0x32
 8002ed6:	4a08      	ldr	r2, [pc, #32]	; (8002ef8 <UART_SetConfig+0x4e4>)
 8002ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8002edc:	095b      	lsrs	r3, r3, #5
 8002ede:	f003 020f 	and.w	r2, r3, #15
 8002ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4422      	add	r2, r4
 8002eea:	609a      	str	r2, [r3, #8]
}
 8002eec:	bf00      	nop
 8002eee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ef8:	51eb851f 	.word	0x51eb851f

08002efc <std>:
 8002efc:	2300      	movs	r3, #0
 8002efe:	b510      	push	{r4, lr}
 8002f00:	4604      	mov	r4, r0
 8002f02:	e9c0 3300 	strd	r3, r3, [r0]
 8002f06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f0a:	6083      	str	r3, [r0, #8]
 8002f0c:	8181      	strh	r1, [r0, #12]
 8002f0e:	6643      	str	r3, [r0, #100]	; 0x64
 8002f10:	81c2      	strh	r2, [r0, #14]
 8002f12:	6183      	str	r3, [r0, #24]
 8002f14:	4619      	mov	r1, r3
 8002f16:	2208      	movs	r2, #8
 8002f18:	305c      	adds	r0, #92	; 0x5c
 8002f1a:	f000 f9e5 	bl	80032e8 <memset>
 8002f1e:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <std+0x38>)
 8002f20:	6263      	str	r3, [r4, #36]	; 0x24
 8002f22:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <std+0x3c>)
 8002f24:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f26:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <std+0x40>)
 8002f28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f2a:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <std+0x44>)
 8002f2c:	6224      	str	r4, [r4, #32]
 8002f2e:	6323      	str	r3, [r4, #48]	; 0x30
 8002f30:	bd10      	pop	{r4, pc}
 8002f32:	bf00      	nop
 8002f34:	08003139 	.word	0x08003139
 8002f38:	0800315b 	.word	0x0800315b
 8002f3c:	08003193 	.word	0x08003193
 8002f40:	080031b7 	.word	0x080031b7

08002f44 <stdio_exit_handler>:
 8002f44:	4a02      	ldr	r2, [pc, #8]	; (8002f50 <stdio_exit_handler+0xc>)
 8002f46:	4903      	ldr	r1, [pc, #12]	; (8002f54 <stdio_exit_handler+0x10>)
 8002f48:	4803      	ldr	r0, [pc, #12]	; (8002f58 <stdio_exit_handler+0x14>)
 8002f4a:	f000 b869 	b.w	8003020 <_fwalk_sglue>
 8002f4e:	bf00      	nop
 8002f50:	20000024 	.word	0x20000024
 8002f54:	08003c81 	.word	0x08003c81
 8002f58:	20000030 	.word	0x20000030

08002f5c <cleanup_stdio>:
 8002f5c:	6841      	ldr	r1, [r0, #4]
 8002f5e:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <cleanup_stdio+0x34>)
 8002f60:	4299      	cmp	r1, r3
 8002f62:	b510      	push	{r4, lr}
 8002f64:	4604      	mov	r4, r0
 8002f66:	d001      	beq.n	8002f6c <cleanup_stdio+0x10>
 8002f68:	f000 fe8a 	bl	8003c80 <_fflush_r>
 8002f6c:	68a1      	ldr	r1, [r4, #8]
 8002f6e:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <cleanup_stdio+0x38>)
 8002f70:	4299      	cmp	r1, r3
 8002f72:	d002      	beq.n	8002f7a <cleanup_stdio+0x1e>
 8002f74:	4620      	mov	r0, r4
 8002f76:	f000 fe83 	bl	8003c80 <_fflush_r>
 8002f7a:	68e1      	ldr	r1, [r4, #12]
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <cleanup_stdio+0x3c>)
 8002f7e:	4299      	cmp	r1, r3
 8002f80:	d004      	beq.n	8002f8c <cleanup_stdio+0x30>
 8002f82:	4620      	mov	r0, r4
 8002f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f88:	f000 be7a 	b.w	8003c80 <_fflush_r>
 8002f8c:	bd10      	pop	{r4, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000134 	.word	0x20000134
 8002f94:	2000019c 	.word	0x2000019c
 8002f98:	20000204 	.word	0x20000204

08002f9c <global_stdio_init.part.0>:
 8002f9c:	b510      	push	{r4, lr}
 8002f9e:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <global_stdio_init.part.0+0x30>)
 8002fa0:	4c0b      	ldr	r4, [pc, #44]	; (8002fd0 <global_stdio_init.part.0+0x34>)
 8002fa2:	4a0c      	ldr	r2, [pc, #48]	; (8002fd4 <global_stdio_init.part.0+0x38>)
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2104      	movs	r1, #4
 8002fac:	f7ff ffa6 	bl	8002efc <std>
 8002fb0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	2109      	movs	r1, #9
 8002fb8:	f7ff ffa0 	bl	8002efc <std>
 8002fbc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fc6:	2112      	movs	r1, #18
 8002fc8:	f7ff bf98 	b.w	8002efc <std>
 8002fcc:	2000026c 	.word	0x2000026c
 8002fd0:	20000134 	.word	0x20000134
 8002fd4:	08002f45 	.word	0x08002f45

08002fd8 <__sfp_lock_acquire>:
 8002fd8:	4801      	ldr	r0, [pc, #4]	; (8002fe0 <__sfp_lock_acquire+0x8>)
 8002fda:	f000 b9fd 	b.w	80033d8 <__retarget_lock_acquire_recursive>
 8002fde:	bf00      	nop
 8002fe0:	20000275 	.word	0x20000275

08002fe4 <__sfp_lock_release>:
 8002fe4:	4801      	ldr	r0, [pc, #4]	; (8002fec <__sfp_lock_release+0x8>)
 8002fe6:	f000 b9f8 	b.w	80033da <__retarget_lock_release_recursive>
 8002fea:	bf00      	nop
 8002fec:	20000275 	.word	0x20000275

08002ff0 <__sinit>:
 8002ff0:	b510      	push	{r4, lr}
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	f7ff fff0 	bl	8002fd8 <__sfp_lock_acquire>
 8002ff8:	6a23      	ldr	r3, [r4, #32]
 8002ffa:	b11b      	cbz	r3, 8003004 <__sinit+0x14>
 8002ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003000:	f7ff bff0 	b.w	8002fe4 <__sfp_lock_release>
 8003004:	4b04      	ldr	r3, [pc, #16]	; (8003018 <__sinit+0x28>)
 8003006:	6223      	str	r3, [r4, #32]
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <__sinit+0x2c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1f5      	bne.n	8002ffc <__sinit+0xc>
 8003010:	f7ff ffc4 	bl	8002f9c <global_stdio_init.part.0>
 8003014:	e7f2      	b.n	8002ffc <__sinit+0xc>
 8003016:	bf00      	nop
 8003018:	08002f5d 	.word	0x08002f5d
 800301c:	2000026c 	.word	0x2000026c

08003020 <_fwalk_sglue>:
 8003020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003024:	4607      	mov	r7, r0
 8003026:	4688      	mov	r8, r1
 8003028:	4614      	mov	r4, r2
 800302a:	2600      	movs	r6, #0
 800302c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003030:	f1b9 0901 	subs.w	r9, r9, #1
 8003034:	d505      	bpl.n	8003042 <_fwalk_sglue+0x22>
 8003036:	6824      	ldr	r4, [r4, #0]
 8003038:	2c00      	cmp	r4, #0
 800303a:	d1f7      	bne.n	800302c <_fwalk_sglue+0xc>
 800303c:	4630      	mov	r0, r6
 800303e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003042:	89ab      	ldrh	r3, [r5, #12]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d907      	bls.n	8003058 <_fwalk_sglue+0x38>
 8003048:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800304c:	3301      	adds	r3, #1
 800304e:	d003      	beq.n	8003058 <_fwalk_sglue+0x38>
 8003050:	4629      	mov	r1, r5
 8003052:	4638      	mov	r0, r7
 8003054:	47c0      	blx	r8
 8003056:	4306      	orrs	r6, r0
 8003058:	3568      	adds	r5, #104	; 0x68
 800305a:	e7e9      	b.n	8003030 <_fwalk_sglue+0x10>

0800305c <iprintf>:
 800305c:	b40f      	push	{r0, r1, r2, r3}
 800305e:	b507      	push	{r0, r1, r2, lr}
 8003060:	4906      	ldr	r1, [pc, #24]	; (800307c <iprintf+0x20>)
 8003062:	ab04      	add	r3, sp, #16
 8003064:	6808      	ldr	r0, [r1, #0]
 8003066:	f853 2b04 	ldr.w	r2, [r3], #4
 800306a:	6881      	ldr	r1, [r0, #8]
 800306c:	9301      	str	r3, [sp, #4]
 800306e:	f000 fad7 	bl	8003620 <_vfiprintf_r>
 8003072:	b003      	add	sp, #12
 8003074:	f85d eb04 	ldr.w	lr, [sp], #4
 8003078:	b004      	add	sp, #16
 800307a:	4770      	bx	lr
 800307c:	2000007c 	.word	0x2000007c

08003080 <_puts_r>:
 8003080:	6a03      	ldr	r3, [r0, #32]
 8003082:	b570      	push	{r4, r5, r6, lr}
 8003084:	6884      	ldr	r4, [r0, #8]
 8003086:	4605      	mov	r5, r0
 8003088:	460e      	mov	r6, r1
 800308a:	b90b      	cbnz	r3, 8003090 <_puts_r+0x10>
 800308c:	f7ff ffb0 	bl	8002ff0 <__sinit>
 8003090:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003092:	07db      	lsls	r3, r3, #31
 8003094:	d405      	bmi.n	80030a2 <_puts_r+0x22>
 8003096:	89a3      	ldrh	r3, [r4, #12]
 8003098:	0598      	lsls	r0, r3, #22
 800309a:	d402      	bmi.n	80030a2 <_puts_r+0x22>
 800309c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800309e:	f000 f99b 	bl	80033d8 <__retarget_lock_acquire_recursive>
 80030a2:	89a3      	ldrh	r3, [r4, #12]
 80030a4:	0719      	lsls	r1, r3, #28
 80030a6:	d513      	bpl.n	80030d0 <_puts_r+0x50>
 80030a8:	6923      	ldr	r3, [r4, #16]
 80030aa:	b18b      	cbz	r3, 80030d0 <_puts_r+0x50>
 80030ac:	3e01      	subs	r6, #1
 80030ae:	68a3      	ldr	r3, [r4, #8]
 80030b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030b4:	3b01      	subs	r3, #1
 80030b6:	60a3      	str	r3, [r4, #8]
 80030b8:	b9e9      	cbnz	r1, 80030f6 <_puts_r+0x76>
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	da2e      	bge.n	800311c <_puts_r+0x9c>
 80030be:	4622      	mov	r2, r4
 80030c0:	210a      	movs	r1, #10
 80030c2:	4628      	mov	r0, r5
 80030c4:	f000 f87b 	bl	80031be <__swbuf_r>
 80030c8:	3001      	adds	r0, #1
 80030ca:	d007      	beq.n	80030dc <_puts_r+0x5c>
 80030cc:	250a      	movs	r5, #10
 80030ce:	e007      	b.n	80030e0 <_puts_r+0x60>
 80030d0:	4621      	mov	r1, r4
 80030d2:	4628      	mov	r0, r5
 80030d4:	f000 f8b0 	bl	8003238 <__swsetup_r>
 80030d8:	2800      	cmp	r0, #0
 80030da:	d0e7      	beq.n	80030ac <_puts_r+0x2c>
 80030dc:	f04f 35ff 	mov.w	r5, #4294967295
 80030e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030e2:	07da      	lsls	r2, r3, #31
 80030e4:	d405      	bmi.n	80030f2 <_puts_r+0x72>
 80030e6:	89a3      	ldrh	r3, [r4, #12]
 80030e8:	059b      	lsls	r3, r3, #22
 80030ea:	d402      	bmi.n	80030f2 <_puts_r+0x72>
 80030ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030ee:	f000 f974 	bl	80033da <__retarget_lock_release_recursive>
 80030f2:	4628      	mov	r0, r5
 80030f4:	bd70      	pop	{r4, r5, r6, pc}
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	da04      	bge.n	8003104 <_puts_r+0x84>
 80030fa:	69a2      	ldr	r2, [r4, #24]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	dc06      	bgt.n	800310e <_puts_r+0x8e>
 8003100:	290a      	cmp	r1, #10
 8003102:	d004      	beq.n	800310e <_puts_r+0x8e>
 8003104:	6823      	ldr	r3, [r4, #0]
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	6022      	str	r2, [r4, #0]
 800310a:	7019      	strb	r1, [r3, #0]
 800310c:	e7cf      	b.n	80030ae <_puts_r+0x2e>
 800310e:	4622      	mov	r2, r4
 8003110:	4628      	mov	r0, r5
 8003112:	f000 f854 	bl	80031be <__swbuf_r>
 8003116:	3001      	adds	r0, #1
 8003118:	d1c9      	bne.n	80030ae <_puts_r+0x2e>
 800311a:	e7df      	b.n	80030dc <_puts_r+0x5c>
 800311c:	6823      	ldr	r3, [r4, #0]
 800311e:	250a      	movs	r5, #10
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	6022      	str	r2, [r4, #0]
 8003124:	701d      	strb	r5, [r3, #0]
 8003126:	e7db      	b.n	80030e0 <_puts_r+0x60>

08003128 <puts>:
 8003128:	4b02      	ldr	r3, [pc, #8]	; (8003134 <puts+0xc>)
 800312a:	4601      	mov	r1, r0
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	f7ff bfa7 	b.w	8003080 <_puts_r>
 8003132:	bf00      	nop
 8003134:	2000007c 	.word	0x2000007c

08003138 <__sread>:
 8003138:	b510      	push	{r4, lr}
 800313a:	460c      	mov	r4, r1
 800313c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003140:	f000 f8fc 	bl	800333c <_read_r>
 8003144:	2800      	cmp	r0, #0
 8003146:	bfab      	itete	ge
 8003148:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800314a:	89a3      	ldrhlt	r3, [r4, #12]
 800314c:	181b      	addge	r3, r3, r0
 800314e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003152:	bfac      	ite	ge
 8003154:	6563      	strge	r3, [r4, #84]	; 0x54
 8003156:	81a3      	strhlt	r3, [r4, #12]
 8003158:	bd10      	pop	{r4, pc}

0800315a <__swrite>:
 800315a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800315e:	461f      	mov	r7, r3
 8003160:	898b      	ldrh	r3, [r1, #12]
 8003162:	05db      	lsls	r3, r3, #23
 8003164:	4605      	mov	r5, r0
 8003166:	460c      	mov	r4, r1
 8003168:	4616      	mov	r6, r2
 800316a:	d505      	bpl.n	8003178 <__swrite+0x1e>
 800316c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003170:	2302      	movs	r3, #2
 8003172:	2200      	movs	r2, #0
 8003174:	f000 f8d0 	bl	8003318 <_lseek_r>
 8003178:	89a3      	ldrh	r3, [r4, #12]
 800317a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800317e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003182:	81a3      	strh	r3, [r4, #12]
 8003184:	4632      	mov	r2, r6
 8003186:	463b      	mov	r3, r7
 8003188:	4628      	mov	r0, r5
 800318a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800318e:	f000 b8e7 	b.w	8003360 <_write_r>

08003192 <__sseek>:
 8003192:	b510      	push	{r4, lr}
 8003194:	460c      	mov	r4, r1
 8003196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800319a:	f000 f8bd 	bl	8003318 <_lseek_r>
 800319e:	1c43      	adds	r3, r0, #1
 80031a0:	89a3      	ldrh	r3, [r4, #12]
 80031a2:	bf15      	itete	ne
 80031a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80031a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80031aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80031ae:	81a3      	strheq	r3, [r4, #12]
 80031b0:	bf18      	it	ne
 80031b2:	81a3      	strhne	r3, [r4, #12]
 80031b4:	bd10      	pop	{r4, pc}

080031b6 <__sclose>:
 80031b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031ba:	f000 b89d 	b.w	80032f8 <_close_r>

080031be <__swbuf_r>:
 80031be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c0:	460e      	mov	r6, r1
 80031c2:	4614      	mov	r4, r2
 80031c4:	4605      	mov	r5, r0
 80031c6:	b118      	cbz	r0, 80031d0 <__swbuf_r+0x12>
 80031c8:	6a03      	ldr	r3, [r0, #32]
 80031ca:	b90b      	cbnz	r3, 80031d0 <__swbuf_r+0x12>
 80031cc:	f7ff ff10 	bl	8002ff0 <__sinit>
 80031d0:	69a3      	ldr	r3, [r4, #24]
 80031d2:	60a3      	str	r3, [r4, #8]
 80031d4:	89a3      	ldrh	r3, [r4, #12]
 80031d6:	071a      	lsls	r2, r3, #28
 80031d8:	d525      	bpl.n	8003226 <__swbuf_r+0x68>
 80031da:	6923      	ldr	r3, [r4, #16]
 80031dc:	b31b      	cbz	r3, 8003226 <__swbuf_r+0x68>
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	6922      	ldr	r2, [r4, #16]
 80031e2:	1a98      	subs	r0, r3, r2
 80031e4:	6963      	ldr	r3, [r4, #20]
 80031e6:	b2f6      	uxtb	r6, r6
 80031e8:	4283      	cmp	r3, r0
 80031ea:	4637      	mov	r7, r6
 80031ec:	dc04      	bgt.n	80031f8 <__swbuf_r+0x3a>
 80031ee:	4621      	mov	r1, r4
 80031f0:	4628      	mov	r0, r5
 80031f2:	f000 fd45 	bl	8003c80 <_fflush_r>
 80031f6:	b9e0      	cbnz	r0, 8003232 <__swbuf_r+0x74>
 80031f8:	68a3      	ldr	r3, [r4, #8]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	60a3      	str	r3, [r4, #8]
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	6022      	str	r2, [r4, #0]
 8003204:	701e      	strb	r6, [r3, #0]
 8003206:	6962      	ldr	r2, [r4, #20]
 8003208:	1c43      	adds	r3, r0, #1
 800320a:	429a      	cmp	r2, r3
 800320c:	d004      	beq.n	8003218 <__swbuf_r+0x5a>
 800320e:	89a3      	ldrh	r3, [r4, #12]
 8003210:	07db      	lsls	r3, r3, #31
 8003212:	d506      	bpl.n	8003222 <__swbuf_r+0x64>
 8003214:	2e0a      	cmp	r6, #10
 8003216:	d104      	bne.n	8003222 <__swbuf_r+0x64>
 8003218:	4621      	mov	r1, r4
 800321a:	4628      	mov	r0, r5
 800321c:	f000 fd30 	bl	8003c80 <_fflush_r>
 8003220:	b938      	cbnz	r0, 8003232 <__swbuf_r+0x74>
 8003222:	4638      	mov	r0, r7
 8003224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003226:	4621      	mov	r1, r4
 8003228:	4628      	mov	r0, r5
 800322a:	f000 f805 	bl	8003238 <__swsetup_r>
 800322e:	2800      	cmp	r0, #0
 8003230:	d0d5      	beq.n	80031de <__swbuf_r+0x20>
 8003232:	f04f 37ff 	mov.w	r7, #4294967295
 8003236:	e7f4      	b.n	8003222 <__swbuf_r+0x64>

08003238 <__swsetup_r>:
 8003238:	b538      	push	{r3, r4, r5, lr}
 800323a:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <__swsetup_r+0xac>)
 800323c:	4605      	mov	r5, r0
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	460c      	mov	r4, r1
 8003242:	b118      	cbz	r0, 800324c <__swsetup_r+0x14>
 8003244:	6a03      	ldr	r3, [r0, #32]
 8003246:	b90b      	cbnz	r3, 800324c <__swsetup_r+0x14>
 8003248:	f7ff fed2 	bl	8002ff0 <__sinit>
 800324c:	89a3      	ldrh	r3, [r4, #12]
 800324e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003252:	0718      	lsls	r0, r3, #28
 8003254:	d422      	bmi.n	800329c <__swsetup_r+0x64>
 8003256:	06d9      	lsls	r1, r3, #27
 8003258:	d407      	bmi.n	800326a <__swsetup_r+0x32>
 800325a:	2309      	movs	r3, #9
 800325c:	602b      	str	r3, [r5, #0]
 800325e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003262:	81a3      	strh	r3, [r4, #12]
 8003264:	f04f 30ff 	mov.w	r0, #4294967295
 8003268:	e034      	b.n	80032d4 <__swsetup_r+0x9c>
 800326a:	0758      	lsls	r0, r3, #29
 800326c:	d512      	bpl.n	8003294 <__swsetup_r+0x5c>
 800326e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003270:	b141      	cbz	r1, 8003284 <__swsetup_r+0x4c>
 8003272:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003276:	4299      	cmp	r1, r3
 8003278:	d002      	beq.n	8003280 <__swsetup_r+0x48>
 800327a:	4628      	mov	r0, r5
 800327c:	f000 f8ae 	bl	80033dc <_free_r>
 8003280:	2300      	movs	r3, #0
 8003282:	6363      	str	r3, [r4, #52]	; 0x34
 8003284:	89a3      	ldrh	r3, [r4, #12]
 8003286:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800328a:	81a3      	strh	r3, [r4, #12]
 800328c:	2300      	movs	r3, #0
 800328e:	6063      	str	r3, [r4, #4]
 8003290:	6923      	ldr	r3, [r4, #16]
 8003292:	6023      	str	r3, [r4, #0]
 8003294:	89a3      	ldrh	r3, [r4, #12]
 8003296:	f043 0308 	orr.w	r3, r3, #8
 800329a:	81a3      	strh	r3, [r4, #12]
 800329c:	6923      	ldr	r3, [r4, #16]
 800329e:	b94b      	cbnz	r3, 80032b4 <__swsetup_r+0x7c>
 80032a0:	89a3      	ldrh	r3, [r4, #12]
 80032a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032aa:	d003      	beq.n	80032b4 <__swsetup_r+0x7c>
 80032ac:	4621      	mov	r1, r4
 80032ae:	4628      	mov	r0, r5
 80032b0:	f000 fd34 	bl	8003d1c <__smakebuf_r>
 80032b4:	89a0      	ldrh	r0, [r4, #12]
 80032b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032ba:	f010 0301 	ands.w	r3, r0, #1
 80032be:	d00a      	beq.n	80032d6 <__swsetup_r+0x9e>
 80032c0:	2300      	movs	r3, #0
 80032c2:	60a3      	str	r3, [r4, #8]
 80032c4:	6963      	ldr	r3, [r4, #20]
 80032c6:	425b      	negs	r3, r3
 80032c8:	61a3      	str	r3, [r4, #24]
 80032ca:	6923      	ldr	r3, [r4, #16]
 80032cc:	b943      	cbnz	r3, 80032e0 <__swsetup_r+0xa8>
 80032ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032d2:	d1c4      	bne.n	800325e <__swsetup_r+0x26>
 80032d4:	bd38      	pop	{r3, r4, r5, pc}
 80032d6:	0781      	lsls	r1, r0, #30
 80032d8:	bf58      	it	pl
 80032da:	6963      	ldrpl	r3, [r4, #20]
 80032dc:	60a3      	str	r3, [r4, #8]
 80032de:	e7f4      	b.n	80032ca <__swsetup_r+0x92>
 80032e0:	2000      	movs	r0, #0
 80032e2:	e7f7      	b.n	80032d4 <__swsetup_r+0x9c>
 80032e4:	2000007c 	.word	0x2000007c

080032e8 <memset>:
 80032e8:	4402      	add	r2, r0
 80032ea:	4603      	mov	r3, r0
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d100      	bne.n	80032f2 <memset+0xa>
 80032f0:	4770      	bx	lr
 80032f2:	f803 1b01 	strb.w	r1, [r3], #1
 80032f6:	e7f9      	b.n	80032ec <memset+0x4>

080032f8 <_close_r>:
 80032f8:	b538      	push	{r3, r4, r5, lr}
 80032fa:	4d06      	ldr	r5, [pc, #24]	; (8003314 <_close_r+0x1c>)
 80032fc:	2300      	movs	r3, #0
 80032fe:	4604      	mov	r4, r0
 8003300:	4608      	mov	r0, r1
 8003302:	602b      	str	r3, [r5, #0]
 8003304:	f7fd fdf1 	bl	8000eea <_close>
 8003308:	1c43      	adds	r3, r0, #1
 800330a:	d102      	bne.n	8003312 <_close_r+0x1a>
 800330c:	682b      	ldr	r3, [r5, #0]
 800330e:	b103      	cbz	r3, 8003312 <_close_r+0x1a>
 8003310:	6023      	str	r3, [r4, #0]
 8003312:	bd38      	pop	{r3, r4, r5, pc}
 8003314:	20000270 	.word	0x20000270

08003318 <_lseek_r>:
 8003318:	b538      	push	{r3, r4, r5, lr}
 800331a:	4d07      	ldr	r5, [pc, #28]	; (8003338 <_lseek_r+0x20>)
 800331c:	4604      	mov	r4, r0
 800331e:	4608      	mov	r0, r1
 8003320:	4611      	mov	r1, r2
 8003322:	2200      	movs	r2, #0
 8003324:	602a      	str	r2, [r5, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	f7fd fe06 	bl	8000f38 <_lseek>
 800332c:	1c43      	adds	r3, r0, #1
 800332e:	d102      	bne.n	8003336 <_lseek_r+0x1e>
 8003330:	682b      	ldr	r3, [r5, #0]
 8003332:	b103      	cbz	r3, 8003336 <_lseek_r+0x1e>
 8003334:	6023      	str	r3, [r4, #0]
 8003336:	bd38      	pop	{r3, r4, r5, pc}
 8003338:	20000270 	.word	0x20000270

0800333c <_read_r>:
 800333c:	b538      	push	{r3, r4, r5, lr}
 800333e:	4d07      	ldr	r5, [pc, #28]	; (800335c <_read_r+0x20>)
 8003340:	4604      	mov	r4, r0
 8003342:	4608      	mov	r0, r1
 8003344:	4611      	mov	r1, r2
 8003346:	2200      	movs	r2, #0
 8003348:	602a      	str	r2, [r5, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	f7fd fd94 	bl	8000e78 <_read>
 8003350:	1c43      	adds	r3, r0, #1
 8003352:	d102      	bne.n	800335a <_read_r+0x1e>
 8003354:	682b      	ldr	r3, [r5, #0]
 8003356:	b103      	cbz	r3, 800335a <_read_r+0x1e>
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	bd38      	pop	{r3, r4, r5, pc}
 800335c:	20000270 	.word	0x20000270

08003360 <_write_r>:
 8003360:	b538      	push	{r3, r4, r5, lr}
 8003362:	4d07      	ldr	r5, [pc, #28]	; (8003380 <_write_r+0x20>)
 8003364:	4604      	mov	r4, r0
 8003366:	4608      	mov	r0, r1
 8003368:	4611      	mov	r1, r2
 800336a:	2200      	movs	r2, #0
 800336c:	602a      	str	r2, [r5, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	f7fd fd9f 	bl	8000eb2 <_write>
 8003374:	1c43      	adds	r3, r0, #1
 8003376:	d102      	bne.n	800337e <_write_r+0x1e>
 8003378:	682b      	ldr	r3, [r5, #0]
 800337a:	b103      	cbz	r3, 800337e <_write_r+0x1e>
 800337c:	6023      	str	r3, [r4, #0]
 800337e:	bd38      	pop	{r3, r4, r5, pc}
 8003380:	20000270 	.word	0x20000270

08003384 <__errno>:
 8003384:	4b01      	ldr	r3, [pc, #4]	; (800338c <__errno+0x8>)
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	2000007c 	.word	0x2000007c

08003390 <__libc_init_array>:
 8003390:	b570      	push	{r4, r5, r6, lr}
 8003392:	4d0d      	ldr	r5, [pc, #52]	; (80033c8 <__libc_init_array+0x38>)
 8003394:	4c0d      	ldr	r4, [pc, #52]	; (80033cc <__libc_init_array+0x3c>)
 8003396:	1b64      	subs	r4, r4, r5
 8003398:	10a4      	asrs	r4, r4, #2
 800339a:	2600      	movs	r6, #0
 800339c:	42a6      	cmp	r6, r4
 800339e:	d109      	bne.n	80033b4 <__libc_init_array+0x24>
 80033a0:	4d0b      	ldr	r5, [pc, #44]	; (80033d0 <__libc_init_array+0x40>)
 80033a2:	4c0c      	ldr	r4, [pc, #48]	; (80033d4 <__libc_init_array+0x44>)
 80033a4:	f000 fd28 	bl	8003df8 <_init>
 80033a8:	1b64      	subs	r4, r4, r5
 80033aa:	10a4      	asrs	r4, r4, #2
 80033ac:	2600      	movs	r6, #0
 80033ae:	42a6      	cmp	r6, r4
 80033b0:	d105      	bne.n	80033be <__libc_init_array+0x2e>
 80033b2:	bd70      	pop	{r4, r5, r6, pc}
 80033b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033b8:	4798      	blx	r3
 80033ba:	3601      	adds	r6, #1
 80033bc:	e7ee      	b.n	800339c <__libc_init_array+0xc>
 80033be:	f855 3b04 	ldr.w	r3, [r5], #4
 80033c2:	4798      	blx	r3
 80033c4:	3601      	adds	r6, #1
 80033c6:	e7f2      	b.n	80033ae <__libc_init_array+0x1e>
 80033c8:	08003ee8 	.word	0x08003ee8
 80033cc:	08003ee8 	.word	0x08003ee8
 80033d0:	08003ee8 	.word	0x08003ee8
 80033d4:	08003eec 	.word	0x08003eec

080033d8 <__retarget_lock_acquire_recursive>:
 80033d8:	4770      	bx	lr

080033da <__retarget_lock_release_recursive>:
 80033da:	4770      	bx	lr

080033dc <_free_r>:
 80033dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033de:	2900      	cmp	r1, #0
 80033e0:	d044      	beq.n	800346c <_free_r+0x90>
 80033e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033e6:	9001      	str	r0, [sp, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f1a1 0404 	sub.w	r4, r1, #4
 80033ee:	bfb8      	it	lt
 80033f0:	18e4      	addlt	r4, r4, r3
 80033f2:	f000 f8df 	bl	80035b4 <__malloc_lock>
 80033f6:	4a1e      	ldr	r2, [pc, #120]	; (8003470 <_free_r+0x94>)
 80033f8:	9801      	ldr	r0, [sp, #4]
 80033fa:	6813      	ldr	r3, [r2, #0]
 80033fc:	b933      	cbnz	r3, 800340c <_free_r+0x30>
 80033fe:	6063      	str	r3, [r4, #4]
 8003400:	6014      	str	r4, [r2, #0]
 8003402:	b003      	add	sp, #12
 8003404:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003408:	f000 b8da 	b.w	80035c0 <__malloc_unlock>
 800340c:	42a3      	cmp	r3, r4
 800340e:	d908      	bls.n	8003422 <_free_r+0x46>
 8003410:	6825      	ldr	r5, [r4, #0]
 8003412:	1961      	adds	r1, r4, r5
 8003414:	428b      	cmp	r3, r1
 8003416:	bf01      	itttt	eq
 8003418:	6819      	ldreq	r1, [r3, #0]
 800341a:	685b      	ldreq	r3, [r3, #4]
 800341c:	1949      	addeq	r1, r1, r5
 800341e:	6021      	streq	r1, [r4, #0]
 8003420:	e7ed      	b.n	80033fe <_free_r+0x22>
 8003422:	461a      	mov	r2, r3
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	b10b      	cbz	r3, 800342c <_free_r+0x50>
 8003428:	42a3      	cmp	r3, r4
 800342a:	d9fa      	bls.n	8003422 <_free_r+0x46>
 800342c:	6811      	ldr	r1, [r2, #0]
 800342e:	1855      	adds	r5, r2, r1
 8003430:	42a5      	cmp	r5, r4
 8003432:	d10b      	bne.n	800344c <_free_r+0x70>
 8003434:	6824      	ldr	r4, [r4, #0]
 8003436:	4421      	add	r1, r4
 8003438:	1854      	adds	r4, r2, r1
 800343a:	42a3      	cmp	r3, r4
 800343c:	6011      	str	r1, [r2, #0]
 800343e:	d1e0      	bne.n	8003402 <_free_r+0x26>
 8003440:	681c      	ldr	r4, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	6053      	str	r3, [r2, #4]
 8003446:	440c      	add	r4, r1
 8003448:	6014      	str	r4, [r2, #0]
 800344a:	e7da      	b.n	8003402 <_free_r+0x26>
 800344c:	d902      	bls.n	8003454 <_free_r+0x78>
 800344e:	230c      	movs	r3, #12
 8003450:	6003      	str	r3, [r0, #0]
 8003452:	e7d6      	b.n	8003402 <_free_r+0x26>
 8003454:	6825      	ldr	r5, [r4, #0]
 8003456:	1961      	adds	r1, r4, r5
 8003458:	428b      	cmp	r3, r1
 800345a:	bf04      	itt	eq
 800345c:	6819      	ldreq	r1, [r3, #0]
 800345e:	685b      	ldreq	r3, [r3, #4]
 8003460:	6063      	str	r3, [r4, #4]
 8003462:	bf04      	itt	eq
 8003464:	1949      	addeq	r1, r1, r5
 8003466:	6021      	streq	r1, [r4, #0]
 8003468:	6054      	str	r4, [r2, #4]
 800346a:	e7ca      	b.n	8003402 <_free_r+0x26>
 800346c:	b003      	add	sp, #12
 800346e:	bd30      	pop	{r4, r5, pc}
 8003470:	20000278 	.word	0x20000278

08003474 <sbrk_aligned>:
 8003474:	b570      	push	{r4, r5, r6, lr}
 8003476:	4e0e      	ldr	r6, [pc, #56]	; (80034b0 <sbrk_aligned+0x3c>)
 8003478:	460c      	mov	r4, r1
 800347a:	6831      	ldr	r1, [r6, #0]
 800347c:	4605      	mov	r5, r0
 800347e:	b911      	cbnz	r1, 8003486 <sbrk_aligned+0x12>
 8003480:	f000 fcaa 	bl	8003dd8 <_sbrk_r>
 8003484:	6030      	str	r0, [r6, #0]
 8003486:	4621      	mov	r1, r4
 8003488:	4628      	mov	r0, r5
 800348a:	f000 fca5 	bl	8003dd8 <_sbrk_r>
 800348e:	1c43      	adds	r3, r0, #1
 8003490:	d00a      	beq.n	80034a8 <sbrk_aligned+0x34>
 8003492:	1cc4      	adds	r4, r0, #3
 8003494:	f024 0403 	bic.w	r4, r4, #3
 8003498:	42a0      	cmp	r0, r4
 800349a:	d007      	beq.n	80034ac <sbrk_aligned+0x38>
 800349c:	1a21      	subs	r1, r4, r0
 800349e:	4628      	mov	r0, r5
 80034a0:	f000 fc9a 	bl	8003dd8 <_sbrk_r>
 80034a4:	3001      	adds	r0, #1
 80034a6:	d101      	bne.n	80034ac <sbrk_aligned+0x38>
 80034a8:	f04f 34ff 	mov.w	r4, #4294967295
 80034ac:	4620      	mov	r0, r4
 80034ae:	bd70      	pop	{r4, r5, r6, pc}
 80034b0:	2000027c 	.word	0x2000027c

080034b4 <_malloc_r>:
 80034b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034b8:	1ccd      	adds	r5, r1, #3
 80034ba:	f025 0503 	bic.w	r5, r5, #3
 80034be:	3508      	adds	r5, #8
 80034c0:	2d0c      	cmp	r5, #12
 80034c2:	bf38      	it	cc
 80034c4:	250c      	movcc	r5, #12
 80034c6:	2d00      	cmp	r5, #0
 80034c8:	4607      	mov	r7, r0
 80034ca:	db01      	blt.n	80034d0 <_malloc_r+0x1c>
 80034cc:	42a9      	cmp	r1, r5
 80034ce:	d905      	bls.n	80034dc <_malloc_r+0x28>
 80034d0:	230c      	movs	r3, #12
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	2600      	movs	r6, #0
 80034d6:	4630      	mov	r0, r6
 80034d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80035b0 <_malloc_r+0xfc>
 80034e0:	f000 f868 	bl	80035b4 <__malloc_lock>
 80034e4:	f8d8 3000 	ldr.w	r3, [r8]
 80034e8:	461c      	mov	r4, r3
 80034ea:	bb5c      	cbnz	r4, 8003544 <_malloc_r+0x90>
 80034ec:	4629      	mov	r1, r5
 80034ee:	4638      	mov	r0, r7
 80034f0:	f7ff ffc0 	bl	8003474 <sbrk_aligned>
 80034f4:	1c43      	adds	r3, r0, #1
 80034f6:	4604      	mov	r4, r0
 80034f8:	d155      	bne.n	80035a6 <_malloc_r+0xf2>
 80034fa:	f8d8 4000 	ldr.w	r4, [r8]
 80034fe:	4626      	mov	r6, r4
 8003500:	2e00      	cmp	r6, #0
 8003502:	d145      	bne.n	8003590 <_malloc_r+0xdc>
 8003504:	2c00      	cmp	r4, #0
 8003506:	d048      	beq.n	800359a <_malloc_r+0xe6>
 8003508:	6823      	ldr	r3, [r4, #0]
 800350a:	4631      	mov	r1, r6
 800350c:	4638      	mov	r0, r7
 800350e:	eb04 0903 	add.w	r9, r4, r3
 8003512:	f000 fc61 	bl	8003dd8 <_sbrk_r>
 8003516:	4581      	cmp	r9, r0
 8003518:	d13f      	bne.n	800359a <_malloc_r+0xe6>
 800351a:	6821      	ldr	r1, [r4, #0]
 800351c:	1a6d      	subs	r5, r5, r1
 800351e:	4629      	mov	r1, r5
 8003520:	4638      	mov	r0, r7
 8003522:	f7ff ffa7 	bl	8003474 <sbrk_aligned>
 8003526:	3001      	adds	r0, #1
 8003528:	d037      	beq.n	800359a <_malloc_r+0xe6>
 800352a:	6823      	ldr	r3, [r4, #0]
 800352c:	442b      	add	r3, r5
 800352e:	6023      	str	r3, [r4, #0]
 8003530:	f8d8 3000 	ldr.w	r3, [r8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d038      	beq.n	80035aa <_malloc_r+0xf6>
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	42a2      	cmp	r2, r4
 800353c:	d12b      	bne.n	8003596 <_malloc_r+0xe2>
 800353e:	2200      	movs	r2, #0
 8003540:	605a      	str	r2, [r3, #4]
 8003542:	e00f      	b.n	8003564 <_malloc_r+0xb0>
 8003544:	6822      	ldr	r2, [r4, #0]
 8003546:	1b52      	subs	r2, r2, r5
 8003548:	d41f      	bmi.n	800358a <_malloc_r+0xd6>
 800354a:	2a0b      	cmp	r2, #11
 800354c:	d917      	bls.n	800357e <_malloc_r+0xca>
 800354e:	1961      	adds	r1, r4, r5
 8003550:	42a3      	cmp	r3, r4
 8003552:	6025      	str	r5, [r4, #0]
 8003554:	bf18      	it	ne
 8003556:	6059      	strne	r1, [r3, #4]
 8003558:	6863      	ldr	r3, [r4, #4]
 800355a:	bf08      	it	eq
 800355c:	f8c8 1000 	streq.w	r1, [r8]
 8003560:	5162      	str	r2, [r4, r5]
 8003562:	604b      	str	r3, [r1, #4]
 8003564:	4638      	mov	r0, r7
 8003566:	f104 060b 	add.w	r6, r4, #11
 800356a:	f000 f829 	bl	80035c0 <__malloc_unlock>
 800356e:	f026 0607 	bic.w	r6, r6, #7
 8003572:	1d23      	adds	r3, r4, #4
 8003574:	1af2      	subs	r2, r6, r3
 8003576:	d0ae      	beq.n	80034d6 <_malloc_r+0x22>
 8003578:	1b9b      	subs	r3, r3, r6
 800357a:	50a3      	str	r3, [r4, r2]
 800357c:	e7ab      	b.n	80034d6 <_malloc_r+0x22>
 800357e:	42a3      	cmp	r3, r4
 8003580:	6862      	ldr	r2, [r4, #4]
 8003582:	d1dd      	bne.n	8003540 <_malloc_r+0x8c>
 8003584:	f8c8 2000 	str.w	r2, [r8]
 8003588:	e7ec      	b.n	8003564 <_malloc_r+0xb0>
 800358a:	4623      	mov	r3, r4
 800358c:	6864      	ldr	r4, [r4, #4]
 800358e:	e7ac      	b.n	80034ea <_malloc_r+0x36>
 8003590:	4634      	mov	r4, r6
 8003592:	6876      	ldr	r6, [r6, #4]
 8003594:	e7b4      	b.n	8003500 <_malloc_r+0x4c>
 8003596:	4613      	mov	r3, r2
 8003598:	e7cc      	b.n	8003534 <_malloc_r+0x80>
 800359a:	230c      	movs	r3, #12
 800359c:	603b      	str	r3, [r7, #0]
 800359e:	4638      	mov	r0, r7
 80035a0:	f000 f80e 	bl	80035c0 <__malloc_unlock>
 80035a4:	e797      	b.n	80034d6 <_malloc_r+0x22>
 80035a6:	6025      	str	r5, [r4, #0]
 80035a8:	e7dc      	b.n	8003564 <_malloc_r+0xb0>
 80035aa:	605b      	str	r3, [r3, #4]
 80035ac:	deff      	udf	#255	; 0xff
 80035ae:	bf00      	nop
 80035b0:	20000278 	.word	0x20000278

080035b4 <__malloc_lock>:
 80035b4:	4801      	ldr	r0, [pc, #4]	; (80035bc <__malloc_lock+0x8>)
 80035b6:	f7ff bf0f 	b.w	80033d8 <__retarget_lock_acquire_recursive>
 80035ba:	bf00      	nop
 80035bc:	20000274 	.word	0x20000274

080035c0 <__malloc_unlock>:
 80035c0:	4801      	ldr	r0, [pc, #4]	; (80035c8 <__malloc_unlock+0x8>)
 80035c2:	f7ff bf0a 	b.w	80033da <__retarget_lock_release_recursive>
 80035c6:	bf00      	nop
 80035c8:	20000274 	.word	0x20000274

080035cc <__sfputc_r>:
 80035cc:	6893      	ldr	r3, [r2, #8]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	b410      	push	{r4}
 80035d4:	6093      	str	r3, [r2, #8]
 80035d6:	da08      	bge.n	80035ea <__sfputc_r+0x1e>
 80035d8:	6994      	ldr	r4, [r2, #24]
 80035da:	42a3      	cmp	r3, r4
 80035dc:	db01      	blt.n	80035e2 <__sfputc_r+0x16>
 80035de:	290a      	cmp	r1, #10
 80035e0:	d103      	bne.n	80035ea <__sfputc_r+0x1e>
 80035e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035e6:	f7ff bdea 	b.w	80031be <__swbuf_r>
 80035ea:	6813      	ldr	r3, [r2, #0]
 80035ec:	1c58      	adds	r0, r3, #1
 80035ee:	6010      	str	r0, [r2, #0]
 80035f0:	7019      	strb	r1, [r3, #0]
 80035f2:	4608      	mov	r0, r1
 80035f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <__sfputs_r>:
 80035fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fc:	4606      	mov	r6, r0
 80035fe:	460f      	mov	r7, r1
 8003600:	4614      	mov	r4, r2
 8003602:	18d5      	adds	r5, r2, r3
 8003604:	42ac      	cmp	r4, r5
 8003606:	d101      	bne.n	800360c <__sfputs_r+0x12>
 8003608:	2000      	movs	r0, #0
 800360a:	e007      	b.n	800361c <__sfputs_r+0x22>
 800360c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003610:	463a      	mov	r2, r7
 8003612:	4630      	mov	r0, r6
 8003614:	f7ff ffda 	bl	80035cc <__sfputc_r>
 8003618:	1c43      	adds	r3, r0, #1
 800361a:	d1f3      	bne.n	8003604 <__sfputs_r+0xa>
 800361c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003620 <_vfiprintf_r>:
 8003620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003624:	460d      	mov	r5, r1
 8003626:	b09d      	sub	sp, #116	; 0x74
 8003628:	4614      	mov	r4, r2
 800362a:	4698      	mov	r8, r3
 800362c:	4606      	mov	r6, r0
 800362e:	b118      	cbz	r0, 8003638 <_vfiprintf_r+0x18>
 8003630:	6a03      	ldr	r3, [r0, #32]
 8003632:	b90b      	cbnz	r3, 8003638 <_vfiprintf_r+0x18>
 8003634:	f7ff fcdc 	bl	8002ff0 <__sinit>
 8003638:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800363a:	07d9      	lsls	r1, r3, #31
 800363c:	d405      	bmi.n	800364a <_vfiprintf_r+0x2a>
 800363e:	89ab      	ldrh	r3, [r5, #12]
 8003640:	059a      	lsls	r2, r3, #22
 8003642:	d402      	bmi.n	800364a <_vfiprintf_r+0x2a>
 8003644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003646:	f7ff fec7 	bl	80033d8 <__retarget_lock_acquire_recursive>
 800364a:	89ab      	ldrh	r3, [r5, #12]
 800364c:	071b      	lsls	r3, r3, #28
 800364e:	d501      	bpl.n	8003654 <_vfiprintf_r+0x34>
 8003650:	692b      	ldr	r3, [r5, #16]
 8003652:	b99b      	cbnz	r3, 800367c <_vfiprintf_r+0x5c>
 8003654:	4629      	mov	r1, r5
 8003656:	4630      	mov	r0, r6
 8003658:	f7ff fdee 	bl	8003238 <__swsetup_r>
 800365c:	b170      	cbz	r0, 800367c <_vfiprintf_r+0x5c>
 800365e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003660:	07dc      	lsls	r4, r3, #31
 8003662:	d504      	bpl.n	800366e <_vfiprintf_r+0x4e>
 8003664:	f04f 30ff 	mov.w	r0, #4294967295
 8003668:	b01d      	add	sp, #116	; 0x74
 800366a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800366e:	89ab      	ldrh	r3, [r5, #12]
 8003670:	0598      	lsls	r0, r3, #22
 8003672:	d4f7      	bmi.n	8003664 <_vfiprintf_r+0x44>
 8003674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003676:	f7ff feb0 	bl	80033da <__retarget_lock_release_recursive>
 800367a:	e7f3      	b.n	8003664 <_vfiprintf_r+0x44>
 800367c:	2300      	movs	r3, #0
 800367e:	9309      	str	r3, [sp, #36]	; 0x24
 8003680:	2320      	movs	r3, #32
 8003682:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003686:	f8cd 800c 	str.w	r8, [sp, #12]
 800368a:	2330      	movs	r3, #48	; 0x30
 800368c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003840 <_vfiprintf_r+0x220>
 8003690:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003694:	f04f 0901 	mov.w	r9, #1
 8003698:	4623      	mov	r3, r4
 800369a:	469a      	mov	sl, r3
 800369c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036a0:	b10a      	cbz	r2, 80036a6 <_vfiprintf_r+0x86>
 80036a2:	2a25      	cmp	r2, #37	; 0x25
 80036a4:	d1f9      	bne.n	800369a <_vfiprintf_r+0x7a>
 80036a6:	ebba 0b04 	subs.w	fp, sl, r4
 80036aa:	d00b      	beq.n	80036c4 <_vfiprintf_r+0xa4>
 80036ac:	465b      	mov	r3, fp
 80036ae:	4622      	mov	r2, r4
 80036b0:	4629      	mov	r1, r5
 80036b2:	4630      	mov	r0, r6
 80036b4:	f7ff ffa1 	bl	80035fa <__sfputs_r>
 80036b8:	3001      	adds	r0, #1
 80036ba:	f000 80a9 	beq.w	8003810 <_vfiprintf_r+0x1f0>
 80036be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036c0:	445a      	add	r2, fp
 80036c2:	9209      	str	r2, [sp, #36]	; 0x24
 80036c4:	f89a 3000 	ldrb.w	r3, [sl]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 80a1 	beq.w	8003810 <_vfiprintf_r+0x1f0>
 80036ce:	2300      	movs	r3, #0
 80036d0:	f04f 32ff 	mov.w	r2, #4294967295
 80036d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036d8:	f10a 0a01 	add.w	sl, sl, #1
 80036dc:	9304      	str	r3, [sp, #16]
 80036de:	9307      	str	r3, [sp, #28]
 80036e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036e4:	931a      	str	r3, [sp, #104]	; 0x68
 80036e6:	4654      	mov	r4, sl
 80036e8:	2205      	movs	r2, #5
 80036ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036ee:	4854      	ldr	r0, [pc, #336]	; (8003840 <_vfiprintf_r+0x220>)
 80036f0:	f7fc fd7e 	bl	80001f0 <memchr>
 80036f4:	9a04      	ldr	r2, [sp, #16]
 80036f6:	b9d8      	cbnz	r0, 8003730 <_vfiprintf_r+0x110>
 80036f8:	06d1      	lsls	r1, r2, #27
 80036fa:	bf44      	itt	mi
 80036fc:	2320      	movmi	r3, #32
 80036fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003702:	0713      	lsls	r3, r2, #28
 8003704:	bf44      	itt	mi
 8003706:	232b      	movmi	r3, #43	; 0x2b
 8003708:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800370c:	f89a 3000 	ldrb.w	r3, [sl]
 8003710:	2b2a      	cmp	r3, #42	; 0x2a
 8003712:	d015      	beq.n	8003740 <_vfiprintf_r+0x120>
 8003714:	9a07      	ldr	r2, [sp, #28]
 8003716:	4654      	mov	r4, sl
 8003718:	2000      	movs	r0, #0
 800371a:	f04f 0c0a 	mov.w	ip, #10
 800371e:	4621      	mov	r1, r4
 8003720:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003724:	3b30      	subs	r3, #48	; 0x30
 8003726:	2b09      	cmp	r3, #9
 8003728:	d94d      	bls.n	80037c6 <_vfiprintf_r+0x1a6>
 800372a:	b1b0      	cbz	r0, 800375a <_vfiprintf_r+0x13a>
 800372c:	9207      	str	r2, [sp, #28]
 800372e:	e014      	b.n	800375a <_vfiprintf_r+0x13a>
 8003730:	eba0 0308 	sub.w	r3, r0, r8
 8003734:	fa09 f303 	lsl.w	r3, r9, r3
 8003738:	4313      	orrs	r3, r2
 800373a:	9304      	str	r3, [sp, #16]
 800373c:	46a2      	mov	sl, r4
 800373e:	e7d2      	b.n	80036e6 <_vfiprintf_r+0xc6>
 8003740:	9b03      	ldr	r3, [sp, #12]
 8003742:	1d19      	adds	r1, r3, #4
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	9103      	str	r1, [sp, #12]
 8003748:	2b00      	cmp	r3, #0
 800374a:	bfbb      	ittet	lt
 800374c:	425b      	neglt	r3, r3
 800374e:	f042 0202 	orrlt.w	r2, r2, #2
 8003752:	9307      	strge	r3, [sp, #28]
 8003754:	9307      	strlt	r3, [sp, #28]
 8003756:	bfb8      	it	lt
 8003758:	9204      	strlt	r2, [sp, #16]
 800375a:	7823      	ldrb	r3, [r4, #0]
 800375c:	2b2e      	cmp	r3, #46	; 0x2e
 800375e:	d10c      	bne.n	800377a <_vfiprintf_r+0x15a>
 8003760:	7863      	ldrb	r3, [r4, #1]
 8003762:	2b2a      	cmp	r3, #42	; 0x2a
 8003764:	d134      	bne.n	80037d0 <_vfiprintf_r+0x1b0>
 8003766:	9b03      	ldr	r3, [sp, #12]
 8003768:	1d1a      	adds	r2, r3, #4
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	9203      	str	r2, [sp, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	bfb8      	it	lt
 8003772:	f04f 33ff 	movlt.w	r3, #4294967295
 8003776:	3402      	adds	r4, #2
 8003778:	9305      	str	r3, [sp, #20]
 800377a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003850 <_vfiprintf_r+0x230>
 800377e:	7821      	ldrb	r1, [r4, #0]
 8003780:	2203      	movs	r2, #3
 8003782:	4650      	mov	r0, sl
 8003784:	f7fc fd34 	bl	80001f0 <memchr>
 8003788:	b138      	cbz	r0, 800379a <_vfiprintf_r+0x17a>
 800378a:	9b04      	ldr	r3, [sp, #16]
 800378c:	eba0 000a 	sub.w	r0, r0, sl
 8003790:	2240      	movs	r2, #64	; 0x40
 8003792:	4082      	lsls	r2, r0
 8003794:	4313      	orrs	r3, r2
 8003796:	3401      	adds	r4, #1
 8003798:	9304      	str	r3, [sp, #16]
 800379a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800379e:	4829      	ldr	r0, [pc, #164]	; (8003844 <_vfiprintf_r+0x224>)
 80037a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037a4:	2206      	movs	r2, #6
 80037a6:	f7fc fd23 	bl	80001f0 <memchr>
 80037aa:	2800      	cmp	r0, #0
 80037ac:	d03f      	beq.n	800382e <_vfiprintf_r+0x20e>
 80037ae:	4b26      	ldr	r3, [pc, #152]	; (8003848 <_vfiprintf_r+0x228>)
 80037b0:	bb1b      	cbnz	r3, 80037fa <_vfiprintf_r+0x1da>
 80037b2:	9b03      	ldr	r3, [sp, #12]
 80037b4:	3307      	adds	r3, #7
 80037b6:	f023 0307 	bic.w	r3, r3, #7
 80037ba:	3308      	adds	r3, #8
 80037bc:	9303      	str	r3, [sp, #12]
 80037be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037c0:	443b      	add	r3, r7
 80037c2:	9309      	str	r3, [sp, #36]	; 0x24
 80037c4:	e768      	b.n	8003698 <_vfiprintf_r+0x78>
 80037c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80037ca:	460c      	mov	r4, r1
 80037cc:	2001      	movs	r0, #1
 80037ce:	e7a6      	b.n	800371e <_vfiprintf_r+0xfe>
 80037d0:	2300      	movs	r3, #0
 80037d2:	3401      	adds	r4, #1
 80037d4:	9305      	str	r3, [sp, #20]
 80037d6:	4619      	mov	r1, r3
 80037d8:	f04f 0c0a 	mov.w	ip, #10
 80037dc:	4620      	mov	r0, r4
 80037de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037e2:	3a30      	subs	r2, #48	; 0x30
 80037e4:	2a09      	cmp	r2, #9
 80037e6:	d903      	bls.n	80037f0 <_vfiprintf_r+0x1d0>
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0c6      	beq.n	800377a <_vfiprintf_r+0x15a>
 80037ec:	9105      	str	r1, [sp, #20]
 80037ee:	e7c4      	b.n	800377a <_vfiprintf_r+0x15a>
 80037f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80037f4:	4604      	mov	r4, r0
 80037f6:	2301      	movs	r3, #1
 80037f8:	e7f0      	b.n	80037dc <_vfiprintf_r+0x1bc>
 80037fa:	ab03      	add	r3, sp, #12
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	462a      	mov	r2, r5
 8003800:	4b12      	ldr	r3, [pc, #72]	; (800384c <_vfiprintf_r+0x22c>)
 8003802:	a904      	add	r1, sp, #16
 8003804:	4630      	mov	r0, r6
 8003806:	f3af 8000 	nop.w
 800380a:	4607      	mov	r7, r0
 800380c:	1c78      	adds	r0, r7, #1
 800380e:	d1d6      	bne.n	80037be <_vfiprintf_r+0x19e>
 8003810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003812:	07d9      	lsls	r1, r3, #31
 8003814:	d405      	bmi.n	8003822 <_vfiprintf_r+0x202>
 8003816:	89ab      	ldrh	r3, [r5, #12]
 8003818:	059a      	lsls	r2, r3, #22
 800381a:	d402      	bmi.n	8003822 <_vfiprintf_r+0x202>
 800381c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800381e:	f7ff fddc 	bl	80033da <__retarget_lock_release_recursive>
 8003822:	89ab      	ldrh	r3, [r5, #12]
 8003824:	065b      	lsls	r3, r3, #25
 8003826:	f53f af1d 	bmi.w	8003664 <_vfiprintf_r+0x44>
 800382a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800382c:	e71c      	b.n	8003668 <_vfiprintf_r+0x48>
 800382e:	ab03      	add	r3, sp, #12
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	462a      	mov	r2, r5
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <_vfiprintf_r+0x22c>)
 8003836:	a904      	add	r1, sp, #16
 8003838:	4630      	mov	r0, r6
 800383a:	f000 f879 	bl	8003930 <_printf_i>
 800383e:	e7e4      	b.n	800380a <_vfiprintf_r+0x1ea>
 8003840:	08003eac 	.word	0x08003eac
 8003844:	08003eb6 	.word	0x08003eb6
 8003848:	00000000 	.word	0x00000000
 800384c:	080035fb 	.word	0x080035fb
 8003850:	08003eb2 	.word	0x08003eb2

08003854 <_printf_common>:
 8003854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003858:	4616      	mov	r6, r2
 800385a:	4699      	mov	r9, r3
 800385c:	688a      	ldr	r2, [r1, #8]
 800385e:	690b      	ldr	r3, [r1, #16]
 8003860:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003864:	4293      	cmp	r3, r2
 8003866:	bfb8      	it	lt
 8003868:	4613      	movlt	r3, r2
 800386a:	6033      	str	r3, [r6, #0]
 800386c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003870:	4607      	mov	r7, r0
 8003872:	460c      	mov	r4, r1
 8003874:	b10a      	cbz	r2, 800387a <_printf_common+0x26>
 8003876:	3301      	adds	r3, #1
 8003878:	6033      	str	r3, [r6, #0]
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	0699      	lsls	r1, r3, #26
 800387e:	bf42      	ittt	mi
 8003880:	6833      	ldrmi	r3, [r6, #0]
 8003882:	3302      	addmi	r3, #2
 8003884:	6033      	strmi	r3, [r6, #0]
 8003886:	6825      	ldr	r5, [r4, #0]
 8003888:	f015 0506 	ands.w	r5, r5, #6
 800388c:	d106      	bne.n	800389c <_printf_common+0x48>
 800388e:	f104 0a19 	add.w	sl, r4, #25
 8003892:	68e3      	ldr	r3, [r4, #12]
 8003894:	6832      	ldr	r2, [r6, #0]
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	42ab      	cmp	r3, r5
 800389a:	dc26      	bgt.n	80038ea <_printf_common+0x96>
 800389c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038a0:	1e13      	subs	r3, r2, #0
 80038a2:	6822      	ldr	r2, [r4, #0]
 80038a4:	bf18      	it	ne
 80038a6:	2301      	movne	r3, #1
 80038a8:	0692      	lsls	r2, r2, #26
 80038aa:	d42b      	bmi.n	8003904 <_printf_common+0xb0>
 80038ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038b0:	4649      	mov	r1, r9
 80038b2:	4638      	mov	r0, r7
 80038b4:	47c0      	blx	r8
 80038b6:	3001      	adds	r0, #1
 80038b8:	d01e      	beq.n	80038f8 <_printf_common+0xa4>
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	6922      	ldr	r2, [r4, #16]
 80038be:	f003 0306 	and.w	r3, r3, #6
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	bf02      	ittt	eq
 80038c6:	68e5      	ldreq	r5, [r4, #12]
 80038c8:	6833      	ldreq	r3, [r6, #0]
 80038ca:	1aed      	subeq	r5, r5, r3
 80038cc:	68a3      	ldr	r3, [r4, #8]
 80038ce:	bf0c      	ite	eq
 80038d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038d4:	2500      	movne	r5, #0
 80038d6:	4293      	cmp	r3, r2
 80038d8:	bfc4      	itt	gt
 80038da:	1a9b      	subgt	r3, r3, r2
 80038dc:	18ed      	addgt	r5, r5, r3
 80038de:	2600      	movs	r6, #0
 80038e0:	341a      	adds	r4, #26
 80038e2:	42b5      	cmp	r5, r6
 80038e4:	d11a      	bne.n	800391c <_printf_common+0xc8>
 80038e6:	2000      	movs	r0, #0
 80038e8:	e008      	b.n	80038fc <_printf_common+0xa8>
 80038ea:	2301      	movs	r3, #1
 80038ec:	4652      	mov	r2, sl
 80038ee:	4649      	mov	r1, r9
 80038f0:	4638      	mov	r0, r7
 80038f2:	47c0      	blx	r8
 80038f4:	3001      	adds	r0, #1
 80038f6:	d103      	bne.n	8003900 <_printf_common+0xac>
 80038f8:	f04f 30ff 	mov.w	r0, #4294967295
 80038fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003900:	3501      	adds	r5, #1
 8003902:	e7c6      	b.n	8003892 <_printf_common+0x3e>
 8003904:	18e1      	adds	r1, r4, r3
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	2030      	movs	r0, #48	; 0x30
 800390a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800390e:	4422      	add	r2, r4
 8003910:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003914:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003918:	3302      	adds	r3, #2
 800391a:	e7c7      	b.n	80038ac <_printf_common+0x58>
 800391c:	2301      	movs	r3, #1
 800391e:	4622      	mov	r2, r4
 8003920:	4649      	mov	r1, r9
 8003922:	4638      	mov	r0, r7
 8003924:	47c0      	blx	r8
 8003926:	3001      	adds	r0, #1
 8003928:	d0e6      	beq.n	80038f8 <_printf_common+0xa4>
 800392a:	3601      	adds	r6, #1
 800392c:	e7d9      	b.n	80038e2 <_printf_common+0x8e>
	...

08003930 <_printf_i>:
 8003930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003934:	7e0f      	ldrb	r7, [r1, #24]
 8003936:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003938:	2f78      	cmp	r7, #120	; 0x78
 800393a:	4691      	mov	r9, r2
 800393c:	4680      	mov	r8, r0
 800393e:	460c      	mov	r4, r1
 8003940:	469a      	mov	sl, r3
 8003942:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003946:	d807      	bhi.n	8003958 <_printf_i+0x28>
 8003948:	2f62      	cmp	r7, #98	; 0x62
 800394a:	d80a      	bhi.n	8003962 <_printf_i+0x32>
 800394c:	2f00      	cmp	r7, #0
 800394e:	f000 80d4 	beq.w	8003afa <_printf_i+0x1ca>
 8003952:	2f58      	cmp	r7, #88	; 0x58
 8003954:	f000 80c0 	beq.w	8003ad8 <_printf_i+0x1a8>
 8003958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800395c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003960:	e03a      	b.n	80039d8 <_printf_i+0xa8>
 8003962:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003966:	2b15      	cmp	r3, #21
 8003968:	d8f6      	bhi.n	8003958 <_printf_i+0x28>
 800396a:	a101      	add	r1, pc, #4	; (adr r1, 8003970 <_printf_i+0x40>)
 800396c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003970:	080039c9 	.word	0x080039c9
 8003974:	080039dd 	.word	0x080039dd
 8003978:	08003959 	.word	0x08003959
 800397c:	08003959 	.word	0x08003959
 8003980:	08003959 	.word	0x08003959
 8003984:	08003959 	.word	0x08003959
 8003988:	080039dd 	.word	0x080039dd
 800398c:	08003959 	.word	0x08003959
 8003990:	08003959 	.word	0x08003959
 8003994:	08003959 	.word	0x08003959
 8003998:	08003959 	.word	0x08003959
 800399c:	08003ae1 	.word	0x08003ae1
 80039a0:	08003a09 	.word	0x08003a09
 80039a4:	08003a9b 	.word	0x08003a9b
 80039a8:	08003959 	.word	0x08003959
 80039ac:	08003959 	.word	0x08003959
 80039b0:	08003b03 	.word	0x08003b03
 80039b4:	08003959 	.word	0x08003959
 80039b8:	08003a09 	.word	0x08003a09
 80039bc:	08003959 	.word	0x08003959
 80039c0:	08003959 	.word	0x08003959
 80039c4:	08003aa3 	.word	0x08003aa3
 80039c8:	682b      	ldr	r3, [r5, #0]
 80039ca:	1d1a      	adds	r2, r3, #4
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	602a      	str	r2, [r5, #0]
 80039d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039d8:	2301      	movs	r3, #1
 80039da:	e09f      	b.n	8003b1c <_printf_i+0x1ec>
 80039dc:	6820      	ldr	r0, [r4, #0]
 80039de:	682b      	ldr	r3, [r5, #0]
 80039e0:	0607      	lsls	r7, r0, #24
 80039e2:	f103 0104 	add.w	r1, r3, #4
 80039e6:	6029      	str	r1, [r5, #0]
 80039e8:	d501      	bpl.n	80039ee <_printf_i+0xbe>
 80039ea:	681e      	ldr	r6, [r3, #0]
 80039ec:	e003      	b.n	80039f6 <_printf_i+0xc6>
 80039ee:	0646      	lsls	r6, r0, #25
 80039f0:	d5fb      	bpl.n	80039ea <_printf_i+0xba>
 80039f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80039f6:	2e00      	cmp	r6, #0
 80039f8:	da03      	bge.n	8003a02 <_printf_i+0xd2>
 80039fa:	232d      	movs	r3, #45	; 0x2d
 80039fc:	4276      	negs	r6, r6
 80039fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a02:	485a      	ldr	r0, [pc, #360]	; (8003b6c <_printf_i+0x23c>)
 8003a04:	230a      	movs	r3, #10
 8003a06:	e012      	b.n	8003a2e <_printf_i+0xfe>
 8003a08:	682b      	ldr	r3, [r5, #0]
 8003a0a:	6820      	ldr	r0, [r4, #0]
 8003a0c:	1d19      	adds	r1, r3, #4
 8003a0e:	6029      	str	r1, [r5, #0]
 8003a10:	0605      	lsls	r5, r0, #24
 8003a12:	d501      	bpl.n	8003a18 <_printf_i+0xe8>
 8003a14:	681e      	ldr	r6, [r3, #0]
 8003a16:	e002      	b.n	8003a1e <_printf_i+0xee>
 8003a18:	0641      	lsls	r1, r0, #25
 8003a1a:	d5fb      	bpl.n	8003a14 <_printf_i+0xe4>
 8003a1c:	881e      	ldrh	r6, [r3, #0]
 8003a1e:	4853      	ldr	r0, [pc, #332]	; (8003b6c <_printf_i+0x23c>)
 8003a20:	2f6f      	cmp	r7, #111	; 0x6f
 8003a22:	bf0c      	ite	eq
 8003a24:	2308      	moveq	r3, #8
 8003a26:	230a      	movne	r3, #10
 8003a28:	2100      	movs	r1, #0
 8003a2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a2e:	6865      	ldr	r5, [r4, #4]
 8003a30:	60a5      	str	r5, [r4, #8]
 8003a32:	2d00      	cmp	r5, #0
 8003a34:	bfa2      	ittt	ge
 8003a36:	6821      	ldrge	r1, [r4, #0]
 8003a38:	f021 0104 	bicge.w	r1, r1, #4
 8003a3c:	6021      	strge	r1, [r4, #0]
 8003a3e:	b90e      	cbnz	r6, 8003a44 <_printf_i+0x114>
 8003a40:	2d00      	cmp	r5, #0
 8003a42:	d04b      	beq.n	8003adc <_printf_i+0x1ac>
 8003a44:	4615      	mov	r5, r2
 8003a46:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a4a:	fb03 6711 	mls	r7, r3, r1, r6
 8003a4e:	5dc7      	ldrb	r7, [r0, r7]
 8003a50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a54:	4637      	mov	r7, r6
 8003a56:	42bb      	cmp	r3, r7
 8003a58:	460e      	mov	r6, r1
 8003a5a:	d9f4      	bls.n	8003a46 <_printf_i+0x116>
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d10b      	bne.n	8003a78 <_printf_i+0x148>
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	07de      	lsls	r6, r3, #31
 8003a64:	d508      	bpl.n	8003a78 <_printf_i+0x148>
 8003a66:	6923      	ldr	r3, [r4, #16]
 8003a68:	6861      	ldr	r1, [r4, #4]
 8003a6a:	4299      	cmp	r1, r3
 8003a6c:	bfde      	ittt	le
 8003a6e:	2330      	movle	r3, #48	; 0x30
 8003a70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a78:	1b52      	subs	r2, r2, r5
 8003a7a:	6122      	str	r2, [r4, #16]
 8003a7c:	f8cd a000 	str.w	sl, [sp]
 8003a80:	464b      	mov	r3, r9
 8003a82:	aa03      	add	r2, sp, #12
 8003a84:	4621      	mov	r1, r4
 8003a86:	4640      	mov	r0, r8
 8003a88:	f7ff fee4 	bl	8003854 <_printf_common>
 8003a8c:	3001      	adds	r0, #1
 8003a8e:	d14a      	bne.n	8003b26 <_printf_i+0x1f6>
 8003a90:	f04f 30ff 	mov.w	r0, #4294967295
 8003a94:	b004      	add	sp, #16
 8003a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a9a:	6823      	ldr	r3, [r4, #0]
 8003a9c:	f043 0320 	orr.w	r3, r3, #32
 8003aa0:	6023      	str	r3, [r4, #0]
 8003aa2:	4833      	ldr	r0, [pc, #204]	; (8003b70 <_printf_i+0x240>)
 8003aa4:	2778      	movs	r7, #120	; 0x78
 8003aa6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	6829      	ldr	r1, [r5, #0]
 8003aae:	061f      	lsls	r7, r3, #24
 8003ab0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ab4:	d402      	bmi.n	8003abc <_printf_i+0x18c>
 8003ab6:	065f      	lsls	r7, r3, #25
 8003ab8:	bf48      	it	mi
 8003aba:	b2b6      	uxthmi	r6, r6
 8003abc:	07df      	lsls	r7, r3, #31
 8003abe:	bf48      	it	mi
 8003ac0:	f043 0320 	orrmi.w	r3, r3, #32
 8003ac4:	6029      	str	r1, [r5, #0]
 8003ac6:	bf48      	it	mi
 8003ac8:	6023      	strmi	r3, [r4, #0]
 8003aca:	b91e      	cbnz	r6, 8003ad4 <_printf_i+0x1a4>
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	f023 0320 	bic.w	r3, r3, #32
 8003ad2:	6023      	str	r3, [r4, #0]
 8003ad4:	2310      	movs	r3, #16
 8003ad6:	e7a7      	b.n	8003a28 <_printf_i+0xf8>
 8003ad8:	4824      	ldr	r0, [pc, #144]	; (8003b6c <_printf_i+0x23c>)
 8003ada:	e7e4      	b.n	8003aa6 <_printf_i+0x176>
 8003adc:	4615      	mov	r5, r2
 8003ade:	e7bd      	b.n	8003a5c <_printf_i+0x12c>
 8003ae0:	682b      	ldr	r3, [r5, #0]
 8003ae2:	6826      	ldr	r6, [r4, #0]
 8003ae4:	6961      	ldr	r1, [r4, #20]
 8003ae6:	1d18      	adds	r0, r3, #4
 8003ae8:	6028      	str	r0, [r5, #0]
 8003aea:	0635      	lsls	r5, r6, #24
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	d501      	bpl.n	8003af4 <_printf_i+0x1c4>
 8003af0:	6019      	str	r1, [r3, #0]
 8003af2:	e002      	b.n	8003afa <_printf_i+0x1ca>
 8003af4:	0670      	lsls	r0, r6, #25
 8003af6:	d5fb      	bpl.n	8003af0 <_printf_i+0x1c0>
 8003af8:	8019      	strh	r1, [r3, #0]
 8003afa:	2300      	movs	r3, #0
 8003afc:	6123      	str	r3, [r4, #16]
 8003afe:	4615      	mov	r5, r2
 8003b00:	e7bc      	b.n	8003a7c <_printf_i+0x14c>
 8003b02:	682b      	ldr	r3, [r5, #0]
 8003b04:	1d1a      	adds	r2, r3, #4
 8003b06:	602a      	str	r2, [r5, #0]
 8003b08:	681d      	ldr	r5, [r3, #0]
 8003b0a:	6862      	ldr	r2, [r4, #4]
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	4628      	mov	r0, r5
 8003b10:	f7fc fb6e 	bl	80001f0 <memchr>
 8003b14:	b108      	cbz	r0, 8003b1a <_printf_i+0x1ea>
 8003b16:	1b40      	subs	r0, r0, r5
 8003b18:	6060      	str	r0, [r4, #4]
 8003b1a:	6863      	ldr	r3, [r4, #4]
 8003b1c:	6123      	str	r3, [r4, #16]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b24:	e7aa      	b.n	8003a7c <_printf_i+0x14c>
 8003b26:	6923      	ldr	r3, [r4, #16]
 8003b28:	462a      	mov	r2, r5
 8003b2a:	4649      	mov	r1, r9
 8003b2c:	4640      	mov	r0, r8
 8003b2e:	47d0      	blx	sl
 8003b30:	3001      	adds	r0, #1
 8003b32:	d0ad      	beq.n	8003a90 <_printf_i+0x160>
 8003b34:	6823      	ldr	r3, [r4, #0]
 8003b36:	079b      	lsls	r3, r3, #30
 8003b38:	d413      	bmi.n	8003b62 <_printf_i+0x232>
 8003b3a:	68e0      	ldr	r0, [r4, #12]
 8003b3c:	9b03      	ldr	r3, [sp, #12]
 8003b3e:	4298      	cmp	r0, r3
 8003b40:	bfb8      	it	lt
 8003b42:	4618      	movlt	r0, r3
 8003b44:	e7a6      	b.n	8003a94 <_printf_i+0x164>
 8003b46:	2301      	movs	r3, #1
 8003b48:	4632      	mov	r2, r6
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	4640      	mov	r0, r8
 8003b4e:	47d0      	blx	sl
 8003b50:	3001      	adds	r0, #1
 8003b52:	d09d      	beq.n	8003a90 <_printf_i+0x160>
 8003b54:	3501      	adds	r5, #1
 8003b56:	68e3      	ldr	r3, [r4, #12]
 8003b58:	9903      	ldr	r1, [sp, #12]
 8003b5a:	1a5b      	subs	r3, r3, r1
 8003b5c:	42ab      	cmp	r3, r5
 8003b5e:	dcf2      	bgt.n	8003b46 <_printf_i+0x216>
 8003b60:	e7eb      	b.n	8003b3a <_printf_i+0x20a>
 8003b62:	2500      	movs	r5, #0
 8003b64:	f104 0619 	add.w	r6, r4, #25
 8003b68:	e7f5      	b.n	8003b56 <_printf_i+0x226>
 8003b6a:	bf00      	nop
 8003b6c:	08003ebd 	.word	0x08003ebd
 8003b70:	08003ece 	.word	0x08003ece

08003b74 <__sflush_r>:
 8003b74:	898a      	ldrh	r2, [r1, #12]
 8003b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b7a:	4605      	mov	r5, r0
 8003b7c:	0710      	lsls	r0, r2, #28
 8003b7e:	460c      	mov	r4, r1
 8003b80:	d458      	bmi.n	8003c34 <__sflush_r+0xc0>
 8003b82:	684b      	ldr	r3, [r1, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	dc05      	bgt.n	8003b94 <__sflush_r+0x20>
 8003b88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	dc02      	bgt.n	8003b94 <__sflush_r+0x20>
 8003b8e:	2000      	movs	r0, #0
 8003b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b96:	2e00      	cmp	r6, #0
 8003b98:	d0f9      	beq.n	8003b8e <__sflush_r+0x1a>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ba0:	682f      	ldr	r7, [r5, #0]
 8003ba2:	6a21      	ldr	r1, [r4, #32]
 8003ba4:	602b      	str	r3, [r5, #0]
 8003ba6:	d032      	beq.n	8003c0e <__sflush_r+0x9a>
 8003ba8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003baa:	89a3      	ldrh	r3, [r4, #12]
 8003bac:	075a      	lsls	r2, r3, #29
 8003bae:	d505      	bpl.n	8003bbc <__sflush_r+0x48>
 8003bb0:	6863      	ldr	r3, [r4, #4]
 8003bb2:	1ac0      	subs	r0, r0, r3
 8003bb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bb6:	b10b      	cbz	r3, 8003bbc <__sflush_r+0x48>
 8003bb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bba:	1ac0      	subs	r0, r0, r3
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bc2:	6a21      	ldr	r1, [r4, #32]
 8003bc4:	4628      	mov	r0, r5
 8003bc6:	47b0      	blx	r6
 8003bc8:	1c43      	adds	r3, r0, #1
 8003bca:	89a3      	ldrh	r3, [r4, #12]
 8003bcc:	d106      	bne.n	8003bdc <__sflush_r+0x68>
 8003bce:	6829      	ldr	r1, [r5, #0]
 8003bd0:	291d      	cmp	r1, #29
 8003bd2:	d82b      	bhi.n	8003c2c <__sflush_r+0xb8>
 8003bd4:	4a29      	ldr	r2, [pc, #164]	; (8003c7c <__sflush_r+0x108>)
 8003bd6:	410a      	asrs	r2, r1
 8003bd8:	07d6      	lsls	r6, r2, #31
 8003bda:	d427      	bmi.n	8003c2c <__sflush_r+0xb8>
 8003bdc:	2200      	movs	r2, #0
 8003bde:	6062      	str	r2, [r4, #4]
 8003be0:	04d9      	lsls	r1, r3, #19
 8003be2:	6922      	ldr	r2, [r4, #16]
 8003be4:	6022      	str	r2, [r4, #0]
 8003be6:	d504      	bpl.n	8003bf2 <__sflush_r+0x7e>
 8003be8:	1c42      	adds	r2, r0, #1
 8003bea:	d101      	bne.n	8003bf0 <__sflush_r+0x7c>
 8003bec:	682b      	ldr	r3, [r5, #0]
 8003bee:	b903      	cbnz	r3, 8003bf2 <__sflush_r+0x7e>
 8003bf0:	6560      	str	r0, [r4, #84]	; 0x54
 8003bf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bf4:	602f      	str	r7, [r5, #0]
 8003bf6:	2900      	cmp	r1, #0
 8003bf8:	d0c9      	beq.n	8003b8e <__sflush_r+0x1a>
 8003bfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bfe:	4299      	cmp	r1, r3
 8003c00:	d002      	beq.n	8003c08 <__sflush_r+0x94>
 8003c02:	4628      	mov	r0, r5
 8003c04:	f7ff fbea 	bl	80033dc <_free_r>
 8003c08:	2000      	movs	r0, #0
 8003c0a:	6360      	str	r0, [r4, #52]	; 0x34
 8003c0c:	e7c0      	b.n	8003b90 <__sflush_r+0x1c>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	4628      	mov	r0, r5
 8003c12:	47b0      	blx	r6
 8003c14:	1c41      	adds	r1, r0, #1
 8003c16:	d1c8      	bne.n	8003baa <__sflush_r+0x36>
 8003c18:	682b      	ldr	r3, [r5, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0c5      	beq.n	8003baa <__sflush_r+0x36>
 8003c1e:	2b1d      	cmp	r3, #29
 8003c20:	d001      	beq.n	8003c26 <__sflush_r+0xb2>
 8003c22:	2b16      	cmp	r3, #22
 8003c24:	d101      	bne.n	8003c2a <__sflush_r+0xb6>
 8003c26:	602f      	str	r7, [r5, #0]
 8003c28:	e7b1      	b.n	8003b8e <__sflush_r+0x1a>
 8003c2a:	89a3      	ldrh	r3, [r4, #12]
 8003c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c30:	81a3      	strh	r3, [r4, #12]
 8003c32:	e7ad      	b.n	8003b90 <__sflush_r+0x1c>
 8003c34:	690f      	ldr	r7, [r1, #16]
 8003c36:	2f00      	cmp	r7, #0
 8003c38:	d0a9      	beq.n	8003b8e <__sflush_r+0x1a>
 8003c3a:	0793      	lsls	r3, r2, #30
 8003c3c:	680e      	ldr	r6, [r1, #0]
 8003c3e:	bf08      	it	eq
 8003c40:	694b      	ldreq	r3, [r1, #20]
 8003c42:	600f      	str	r7, [r1, #0]
 8003c44:	bf18      	it	ne
 8003c46:	2300      	movne	r3, #0
 8003c48:	eba6 0807 	sub.w	r8, r6, r7
 8003c4c:	608b      	str	r3, [r1, #8]
 8003c4e:	f1b8 0f00 	cmp.w	r8, #0
 8003c52:	dd9c      	ble.n	8003b8e <__sflush_r+0x1a>
 8003c54:	6a21      	ldr	r1, [r4, #32]
 8003c56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c58:	4643      	mov	r3, r8
 8003c5a:	463a      	mov	r2, r7
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	47b0      	blx	r6
 8003c60:	2800      	cmp	r0, #0
 8003c62:	dc06      	bgt.n	8003c72 <__sflush_r+0xfe>
 8003c64:	89a3      	ldrh	r3, [r4, #12]
 8003c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c6a:	81a3      	strh	r3, [r4, #12]
 8003c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c70:	e78e      	b.n	8003b90 <__sflush_r+0x1c>
 8003c72:	4407      	add	r7, r0
 8003c74:	eba8 0800 	sub.w	r8, r8, r0
 8003c78:	e7e9      	b.n	8003c4e <__sflush_r+0xda>
 8003c7a:	bf00      	nop
 8003c7c:	dfbffffe 	.word	0xdfbffffe

08003c80 <_fflush_r>:
 8003c80:	b538      	push	{r3, r4, r5, lr}
 8003c82:	690b      	ldr	r3, [r1, #16]
 8003c84:	4605      	mov	r5, r0
 8003c86:	460c      	mov	r4, r1
 8003c88:	b913      	cbnz	r3, 8003c90 <_fflush_r+0x10>
 8003c8a:	2500      	movs	r5, #0
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	bd38      	pop	{r3, r4, r5, pc}
 8003c90:	b118      	cbz	r0, 8003c9a <_fflush_r+0x1a>
 8003c92:	6a03      	ldr	r3, [r0, #32]
 8003c94:	b90b      	cbnz	r3, 8003c9a <_fflush_r+0x1a>
 8003c96:	f7ff f9ab 	bl	8002ff0 <__sinit>
 8003c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f3      	beq.n	8003c8a <_fflush_r+0xa>
 8003ca2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ca4:	07d0      	lsls	r0, r2, #31
 8003ca6:	d404      	bmi.n	8003cb2 <_fflush_r+0x32>
 8003ca8:	0599      	lsls	r1, r3, #22
 8003caa:	d402      	bmi.n	8003cb2 <_fflush_r+0x32>
 8003cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cae:	f7ff fb93 	bl	80033d8 <__retarget_lock_acquire_recursive>
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	4621      	mov	r1, r4
 8003cb6:	f7ff ff5d 	bl	8003b74 <__sflush_r>
 8003cba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cbc:	07da      	lsls	r2, r3, #31
 8003cbe:	4605      	mov	r5, r0
 8003cc0:	d4e4      	bmi.n	8003c8c <_fflush_r+0xc>
 8003cc2:	89a3      	ldrh	r3, [r4, #12]
 8003cc4:	059b      	lsls	r3, r3, #22
 8003cc6:	d4e1      	bmi.n	8003c8c <_fflush_r+0xc>
 8003cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cca:	f7ff fb86 	bl	80033da <__retarget_lock_release_recursive>
 8003cce:	e7dd      	b.n	8003c8c <_fflush_r+0xc>

08003cd0 <__swhatbuf_r>:
 8003cd0:	b570      	push	{r4, r5, r6, lr}
 8003cd2:	460c      	mov	r4, r1
 8003cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cd8:	2900      	cmp	r1, #0
 8003cda:	b096      	sub	sp, #88	; 0x58
 8003cdc:	4615      	mov	r5, r2
 8003cde:	461e      	mov	r6, r3
 8003ce0:	da0d      	bge.n	8003cfe <__swhatbuf_r+0x2e>
 8003ce2:	89a3      	ldrh	r3, [r4, #12]
 8003ce4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003ce8:	f04f 0100 	mov.w	r1, #0
 8003cec:	bf0c      	ite	eq
 8003cee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003cf2:	2340      	movne	r3, #64	; 0x40
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	6031      	str	r1, [r6, #0]
 8003cf8:	602b      	str	r3, [r5, #0]
 8003cfa:	b016      	add	sp, #88	; 0x58
 8003cfc:	bd70      	pop	{r4, r5, r6, pc}
 8003cfe:	466a      	mov	r2, sp
 8003d00:	f000 f848 	bl	8003d94 <_fstat_r>
 8003d04:	2800      	cmp	r0, #0
 8003d06:	dbec      	blt.n	8003ce2 <__swhatbuf_r+0x12>
 8003d08:	9901      	ldr	r1, [sp, #4]
 8003d0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003d0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003d12:	4259      	negs	r1, r3
 8003d14:	4159      	adcs	r1, r3
 8003d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d1a:	e7eb      	b.n	8003cf4 <__swhatbuf_r+0x24>

08003d1c <__smakebuf_r>:
 8003d1c:	898b      	ldrh	r3, [r1, #12]
 8003d1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d20:	079d      	lsls	r5, r3, #30
 8003d22:	4606      	mov	r6, r0
 8003d24:	460c      	mov	r4, r1
 8003d26:	d507      	bpl.n	8003d38 <__smakebuf_r+0x1c>
 8003d28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d2c:	6023      	str	r3, [r4, #0]
 8003d2e:	6123      	str	r3, [r4, #16]
 8003d30:	2301      	movs	r3, #1
 8003d32:	6163      	str	r3, [r4, #20]
 8003d34:	b002      	add	sp, #8
 8003d36:	bd70      	pop	{r4, r5, r6, pc}
 8003d38:	ab01      	add	r3, sp, #4
 8003d3a:	466a      	mov	r2, sp
 8003d3c:	f7ff ffc8 	bl	8003cd0 <__swhatbuf_r>
 8003d40:	9900      	ldr	r1, [sp, #0]
 8003d42:	4605      	mov	r5, r0
 8003d44:	4630      	mov	r0, r6
 8003d46:	f7ff fbb5 	bl	80034b4 <_malloc_r>
 8003d4a:	b948      	cbnz	r0, 8003d60 <__smakebuf_r+0x44>
 8003d4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d50:	059a      	lsls	r2, r3, #22
 8003d52:	d4ef      	bmi.n	8003d34 <__smakebuf_r+0x18>
 8003d54:	f023 0303 	bic.w	r3, r3, #3
 8003d58:	f043 0302 	orr.w	r3, r3, #2
 8003d5c:	81a3      	strh	r3, [r4, #12]
 8003d5e:	e7e3      	b.n	8003d28 <__smakebuf_r+0xc>
 8003d60:	89a3      	ldrh	r3, [r4, #12]
 8003d62:	6020      	str	r0, [r4, #0]
 8003d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d68:	81a3      	strh	r3, [r4, #12]
 8003d6a:	9b00      	ldr	r3, [sp, #0]
 8003d6c:	6163      	str	r3, [r4, #20]
 8003d6e:	9b01      	ldr	r3, [sp, #4]
 8003d70:	6120      	str	r0, [r4, #16]
 8003d72:	b15b      	cbz	r3, 8003d8c <__smakebuf_r+0x70>
 8003d74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d78:	4630      	mov	r0, r6
 8003d7a:	f000 f81d 	bl	8003db8 <_isatty_r>
 8003d7e:	b128      	cbz	r0, 8003d8c <__smakebuf_r+0x70>
 8003d80:	89a3      	ldrh	r3, [r4, #12]
 8003d82:	f023 0303 	bic.w	r3, r3, #3
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	81a3      	strh	r3, [r4, #12]
 8003d8c:	89a3      	ldrh	r3, [r4, #12]
 8003d8e:	431d      	orrs	r5, r3
 8003d90:	81a5      	strh	r5, [r4, #12]
 8003d92:	e7cf      	b.n	8003d34 <__smakebuf_r+0x18>

08003d94 <_fstat_r>:
 8003d94:	b538      	push	{r3, r4, r5, lr}
 8003d96:	4d07      	ldr	r5, [pc, #28]	; (8003db4 <_fstat_r+0x20>)
 8003d98:	2300      	movs	r3, #0
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	4608      	mov	r0, r1
 8003d9e:	4611      	mov	r1, r2
 8003da0:	602b      	str	r3, [r5, #0]
 8003da2:	f7fd f8ae 	bl	8000f02 <_fstat>
 8003da6:	1c43      	adds	r3, r0, #1
 8003da8:	d102      	bne.n	8003db0 <_fstat_r+0x1c>
 8003daa:	682b      	ldr	r3, [r5, #0]
 8003dac:	b103      	cbz	r3, 8003db0 <_fstat_r+0x1c>
 8003dae:	6023      	str	r3, [r4, #0]
 8003db0:	bd38      	pop	{r3, r4, r5, pc}
 8003db2:	bf00      	nop
 8003db4:	20000270 	.word	0x20000270

08003db8 <_isatty_r>:
 8003db8:	b538      	push	{r3, r4, r5, lr}
 8003dba:	4d06      	ldr	r5, [pc, #24]	; (8003dd4 <_isatty_r+0x1c>)
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	4608      	mov	r0, r1
 8003dc2:	602b      	str	r3, [r5, #0]
 8003dc4:	f7fd f8ad 	bl	8000f22 <_isatty>
 8003dc8:	1c43      	adds	r3, r0, #1
 8003dca:	d102      	bne.n	8003dd2 <_isatty_r+0x1a>
 8003dcc:	682b      	ldr	r3, [r5, #0]
 8003dce:	b103      	cbz	r3, 8003dd2 <_isatty_r+0x1a>
 8003dd0:	6023      	str	r3, [r4, #0]
 8003dd2:	bd38      	pop	{r3, r4, r5, pc}
 8003dd4:	20000270 	.word	0x20000270

08003dd8 <_sbrk_r>:
 8003dd8:	b538      	push	{r3, r4, r5, lr}
 8003dda:	4d06      	ldr	r5, [pc, #24]	; (8003df4 <_sbrk_r+0x1c>)
 8003ddc:	2300      	movs	r3, #0
 8003dde:	4604      	mov	r4, r0
 8003de0:	4608      	mov	r0, r1
 8003de2:	602b      	str	r3, [r5, #0]
 8003de4:	f7fd f8b6 	bl	8000f54 <_sbrk>
 8003de8:	1c43      	adds	r3, r0, #1
 8003dea:	d102      	bne.n	8003df2 <_sbrk_r+0x1a>
 8003dec:	682b      	ldr	r3, [r5, #0]
 8003dee:	b103      	cbz	r3, 8003df2 <_sbrk_r+0x1a>
 8003df0:	6023      	str	r3, [r4, #0]
 8003df2:	bd38      	pop	{r3, r4, r5, pc}
 8003df4:	20000270 	.word	0x20000270

08003df8 <_init>:
 8003df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfa:	bf00      	nop
 8003dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dfe:	bc08      	pop	{r3}
 8003e00:	469e      	mov	lr, r3
 8003e02:	4770      	bx	lr

08003e04 <_fini>:
 8003e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e06:	bf00      	nop
 8003e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e0a:	bc08      	pop	{r3}
 8003e0c:	469e      	mov	lr, r3
 8003e0e:	4770      	bx	lr
